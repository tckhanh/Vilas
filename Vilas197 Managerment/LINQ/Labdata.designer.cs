#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabManagement.LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbvilas197")]
	public partial class LabdataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccHoldStatus(AccHoldStatus instance);
    partial void UpdateAccHoldStatus(AccHoldStatus instance);
    partial void DeleteAccHoldStatus(AccHoldStatus instance);
    partial void InsertTestSystemSource(TestSystemSource instance);
    partial void UpdateTestSystemSource(TestSystemSource instance);
    partial void DeleteTestSystemSource(TestSystemSource instance);
    partial void InsertAccType(AccType instance);
    partial void UpdateAccType(AccType instance);
    partial void DeleteAccType(AccType instance);
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertAuthorize(Authorize instance);
    partial void UpdateAuthorize(Authorize instance);
    partial void DeleteAuthorize(Authorize instance);
    partial void InsertCalibration(Calibration instance);
    partial void UpdateCalibration(Calibration instance);
    partial void DeleteCalibration(Calibration instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertEffectToSy(EffectToSy instance);
    partial void UpdateEffectToSy(EffectToSy instance);
    partial void DeleteEffectToSy(EffectToSy instance);
    partial void InsertEnvironment(Environment instance);
    partial void UpdateEnvironment(Environment instance);
    partial void DeleteEnvironment(Environment instance);
    partial void InsertEquipmentType(EquipmentType instance);
    partial void UpdateEquipmentType(EquipmentType instance);
    partial void DeleteEquipmentType(EquipmentType instance);
    partial void InsertGroupEquipment(GroupEquipment instance);
    partial void UpdateGroupEquipment(GroupEquipment instance);
    partial void DeleteGroupEquipment(GroupEquipment instance);
    partial void InsertHandover(Handover instance);
    partial void UpdateHandover(Handover instance);
    partial void DeleteHandover(Handover instance);
    partial void InsertHandoverAcc(HandoverAcc instance);
    partial void UpdateHandoverAcc(HandoverAcc instance);
    partial void DeleteHandoverAcc(HandoverAcc instance);
    partial void InsertHandoverStatus(HandoverStatus instance);
    partial void UpdateHandoverStatus(HandoverStatus instance);
    partial void DeleteHandoverStatus(HandoverStatus instance);
    partial void InsertIncidentStatus(IncidentStatus instance);
    partial void UpdateIncidentStatus(IncidentStatus instance);
    partial void DeleteIncidentStatus(IncidentStatus instance);
    partial void InsertNumber(Number instance);
    partial void UpdateNumber(Number instance);
    partial void DeleteNumber(Number instance);
    partial void InsertOrderSt(OrderSt instance);
    partial void UpdateOrderSt(OrderSt instance);
    partial void DeleteOrderSt(OrderSt instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertRedBill(RedBill instance);
    partial void UpdateRedBill(RedBill instance);
    partial void DeleteRedBill(RedBill instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertRequestStatus(RequestStatus instance);
    partial void UpdateRequestStatus(RequestStatus instance);
    partial void DeleteRequestStatus(RequestStatus instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStationery(Stationery instance);
    partial void UpdateStationery(Stationery instance);
    partial void DeleteStationery(Stationery instance);
    partial void InsertTestAccessory(TestAccessory instance);
    partial void UpdateTestAccessory(TestAccessory instance);
    partial void DeleteTestAccessory(TestAccessory instance);
    partial void InsertTestField(TestField instance);
    partial void UpdateTestField(TestField instance);
    partial void DeleteTestField(TestField instance);
    partial void InsertTestReport(TestReport instance);
    partial void UpdateTestReport(TestReport instance);
    partial void DeleteTestReport(TestReport instance);
    partial void InsertTestSysStatus(TestSysStatus instance);
    partial void UpdateTestSysStatus(TestSysStatus instance);
    partial void DeleteTestSysStatus(TestSysStatus instance);
    partial void InsertTestSystem(TestSystem instance);
    partial void UpdateTestSystem(TestSystem instance);
    partial void DeleteTestSystem(TestSystem instance);
    #endregion
		
		public LabdataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db_mang"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LabdataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabdataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabdataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabdataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccHoldStatus> AccHoldStatus
		{
			get
			{
				return this.GetTable<AccHoldStatus>();
			}
		}
		
		public System.Data.Linq.Table<TestSystemSource> TestSystemSources
		{
			get
			{
				return this.GetTable<TestSystemSource>();
			}
		}
		
		public System.Data.Linq.Table<AccType> AccTypes
		{
			get
			{
				return this.GetTable<AccType>();
			}
		}
		
		public System.Data.Linq.Table<Assignment> Assignments
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<Authorize> Authorizes
		{
			get
			{
				return this.GetTable<Authorize>();
			}
		}
		
		public System.Data.Linq.Table<Calibration> Calibrations
		{
			get
			{
				return this.GetTable<Calibration>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<EffectToSy> EffectToSies
		{
			get
			{
				return this.GetTable<EffectToSy>();
			}
		}
		
		public System.Data.Linq.Table<Environment> Environments
		{
			get
			{
				return this.GetTable<Environment>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentType> EquipmentTypes
		{
			get
			{
				return this.GetTable<EquipmentType>();
			}
		}
		
		public System.Data.Linq.Table<GroupEquipment> GroupEquipments
		{
			get
			{
				return this.GetTable<GroupEquipment>();
			}
		}
		
		public System.Data.Linq.Table<Handover> Handovers
		{
			get
			{
				return this.GetTable<Handover>();
			}
		}
		
		public System.Data.Linq.Table<HandoverAcc> HandoverAccs
		{
			get
			{
				return this.GetTable<HandoverAcc>();
			}
		}
		
		public System.Data.Linq.Table<HandoverStatus> HandoverStatus
		{
			get
			{
				return this.GetTable<HandoverStatus>();
			}
		}
		
		public System.Data.Linq.Table<Incident> Incidents
		{
			get
			{
				return this.GetTable<Incident>();
			}
		}
		
		public System.Data.Linq.Table<IncidentStatus> IncidentStatus
		{
			get
			{
				return this.GetTable<IncidentStatus>();
			}
		}
		
		public System.Data.Linq.Table<Number> Numbers
		{
			get
			{
				return this.GetTable<Number>();
			}
		}
		
		public System.Data.Linq.Table<OrderSt> OrderSts
		{
			get
			{
				return this.GetTable<OrderSt>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<RedBill> RedBills
		{
			get
			{
				return this.GetTable<RedBill>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<RequestStatus> RequestStatus
		{
			get
			{
				return this.GetTable<RequestStatus>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Stationery> Stationeries
		{
			get
			{
				return this.GetTable<Stationery>();
			}
		}
		
		public System.Data.Linq.Table<TestAccessory> TestAccessories
		{
			get
			{
				return this.GetTable<TestAccessory>();
			}
		}
		
		public System.Data.Linq.Table<TestField> TestFields
		{
			get
			{
				return this.GetTable<TestField>();
			}
		}
		
		public System.Data.Linq.Table<TestReport> TestReports
		{
			get
			{
				return this.GetTable<TestReport>();
			}
		}
		
		public System.Data.Linq.Table<TestSysStatus> TestSysStatus
		{
			get
			{
				return this.GetTable<TestSysStatus>();
			}
		}
		
		public System.Data.Linq.Table<TestSystem> TestSystems
		{
			get
			{
				return this.GetTable<TestSystem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccHoldStatus")]
	public partial class AccHoldStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccHoldID;
		
		private string _AccHoldName;
		
		private EntitySet<TestAccessory> _TestAccessories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccHoldIDChanging(int value);
    partial void OnAccHoldIDChanged();
    partial void OnAccHoldNameChanging(string value);
    partial void OnAccHoldNameChanged();
    #endregion
		
		public AccHoldStatus()
		{
			this._TestAccessories = new EntitySet<TestAccessory>(new Action<TestAccessory>(this.attach_TestAccessories), new Action<TestAccessory>(this.detach_TestAccessories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccHoldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccHoldID
		{
			get
			{
				return this._AccHoldID;
			}
			set
			{
				if ((this._AccHoldID != value))
				{
					this.OnAccHoldIDChanging(value);
					this.SendPropertyChanging();
					this._AccHoldID = value;
					this.SendPropertyChanged("AccHoldID");
					this.OnAccHoldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccHoldName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AccHoldName
		{
			get
			{
				return this._AccHoldName;
			}
			set
			{
				if ((this._AccHoldName != value))
				{
					this.OnAccHoldNameChanging(value);
					this.SendPropertyChanging();
					this._AccHoldName = value;
					this.SendPropertyChanged("AccHoldName");
					this.OnAccHoldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccHoldStatus_TestAccessory", Storage="_TestAccessories", ThisKey="AccHoldID", OtherKey="Hold")]
		public EntitySet<TestAccessory> TestAccessories
		{
			get
			{
				return this._TestAccessories;
			}
			set
			{
				this._TestAccessories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.AccHoldStatus = this;
		}
		
		private void detach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.AccHoldStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSystemSource")]
	public partial class TestSystemSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceID;
		
		private string _SourceInfo;
		
		private EntitySet<TestSystem> _TestSystems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIDChanging(int value);
    partial void OnSourceIDChanged();
    partial void OnSourceInfoChanging(string value);
    partial void OnSourceInfoChanged();
    #endregion
		
		public TestSystemSource()
		{
			this._TestSystems = new EntitySet<TestSystem>(new Action<TestSystem>(this.attach_TestSystems), new Action<TestSystem>(this.detach_TestSystems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string SourceInfo
		{
			get
			{
				return this._SourceInfo;
			}
			set
			{
				if ((this._SourceInfo != value))
				{
					this.OnSourceInfoChanging(value);
					this.SendPropertyChanging();
					this._SourceInfo = value;
					this.SendPropertyChanged("SourceInfo");
					this.OnSourceInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystemSource_TestSystem", Storage="_TestSystems", ThisKey="SourceID", OtherKey="SourceID")]
		public EntitySet<TestSystem> TestSystems
		{
			get
			{
				return this._TestSystems;
			}
			set
			{
				this._TestSystems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestSystemSource = this;
		}
		
		private void detach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestSystemSource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccType")]
	public partial class AccType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccTypeID;
		
		private string _AccTypeName;
		
		private EntitySet<TestAccessory> _TestAccessories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccTypeIDChanging(int value);
    partial void OnAccTypeIDChanged();
    partial void OnAccTypeNameChanging(string value);
    partial void OnAccTypeNameChanged();
    #endregion
		
		public AccType()
		{
			this._TestAccessories = new EntitySet<TestAccessory>(new Action<TestAccessory>(this.attach_TestAccessories), new Action<TestAccessory>(this.detach_TestAccessories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccTypeID
		{
			get
			{
				return this._AccTypeID;
			}
			set
			{
				if ((this._AccTypeID != value))
				{
					this.OnAccTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AccTypeID = value;
					this.SendPropertyChanged("AccTypeID");
					this.OnAccTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccTypeName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AccTypeName
		{
			get
			{
				return this._AccTypeName;
			}
			set
			{
				if ((this._AccTypeName != value))
				{
					this.OnAccTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AccTypeName = value;
					this.SendPropertyChanged("AccTypeName");
					this.OnAccTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccType_TestAccessory", Storage="_TestAccessories", ThisKey="AccTypeID", OtherKey="AccTypeID")]
		public EntitySet<TestAccessory> TestAccessories
		{
			get
			{
				return this._TestAccessories;
			}
			set
			{
				this._TestAccessories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.AccType = this;
		}
		
		private void detach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.AccType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assignment")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentID;
		
		private string _AssignStaffID;
		
		private string _TestStaffID1;
		
		private string _TestStaffID2;
		
		private System.Nullable<System.DateTime> _AssignDate;
		
		private string _AssignNote;
		
		private System.Nullable<int> _ReAssign;
		
		private EntityRef<TestReport> _TestReport;
		
		private EntityRef<Request> _Request;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
		private EntityRef<Staff> _Staff2;
		
		private EntityRef<Staff> _Staff3;
		
		private EntityRef<Staff> _Staff4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIDChanging(int value);
    partial void OnAssignmentIDChanged();
    partial void OnAssignStaffIDChanging(string value);
    partial void OnAssignStaffIDChanged();
    partial void OnTestStaffID1Changing(string value);
    partial void OnTestStaffID1Changed();
    partial void OnTestStaffID2Changing(string value);
    partial void OnTestStaffID2Changed();
    partial void OnAssignDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignDateChanged();
    partial void OnAssignNoteChanging(string value);
    partial void OnAssignNoteChanged();
    partial void OnReAssignChanging(System.Nullable<int> value);
    partial void OnReAssignChanged();
    #endregion
		
		public Assignment()
		{
			this._TestReport = default(EntityRef<TestReport>);
			this._Request = default(EntityRef<Request>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			this._Staff2 = default(EntityRef<Staff>);
			this._Staff3 = default(EntityRef<Staff>);
			this._Staff4 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssignmentID
		{
			get
			{
				return this._AssignmentID;
			}
			set
			{
				if ((this._AssignmentID != value))
				{
					if (this._Request.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssignmentID = value;
					this.SendPropertyChanged("AssignmentID");
					this.OnAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignStaffID", DbType="NVarChar(30)")]
		public string AssignStaffID
		{
			get
			{
				return this._AssignStaffID;
			}
			set
			{
				if ((this._AssignStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignStaffIDChanging(value);
					this.SendPropertyChanging();
					this._AssignStaffID = value;
					this.SendPropertyChanged("AssignStaffID");
					this.OnAssignStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestStaffID1", DbType="NVarChar(30)")]
		public string TestStaffID1
		{
			get
			{
				return this._TestStaffID1;
			}
			set
			{
				if ((this._TestStaffID1 != value))
				{
					if ((this._Staff1.HasLoadedOrAssignedValue || this._Staff3.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestStaffID1Changing(value);
					this.SendPropertyChanging();
					this._TestStaffID1 = value;
					this.SendPropertyChanged("TestStaffID1");
					this.OnTestStaffID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestStaffID2", DbType="NVarChar(30)")]
		public string TestStaffID2
		{
			get
			{
				return this._TestStaffID2;
			}
			set
			{
				if ((this._TestStaffID2 != value))
				{
					if ((this._Staff2.HasLoadedOrAssignedValue || this._Staff4.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestStaffID2Changing(value);
					this.SendPropertyChanging();
					this._TestStaffID2 = value;
					this.SendPropertyChanged("TestStaffID2");
					this.OnTestStaffID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignDate", DbType="Date")]
		public System.Nullable<System.DateTime> AssignDate
		{
			get
			{
				return this._AssignDate;
			}
			set
			{
				if ((this._AssignDate != value))
				{
					this.OnAssignDateChanging(value);
					this.SendPropertyChanging();
					this._AssignDate = value;
					this.SendPropertyChanged("AssignDate");
					this.OnAssignDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignNote", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AssignNote
		{
			get
			{
				return this._AssignNote;
			}
			set
			{
				if ((this._AssignNote != value))
				{
					this.OnAssignNoteChanging(value);
					this.SendPropertyChanging();
					this._AssignNote = value;
					this.SendPropertyChanged("AssignNote");
					this.OnAssignNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReAssign", DbType="Int")]
		public System.Nullable<int> ReAssign
		{
			get
			{
				return this._ReAssign;
			}
			set
			{
				if ((this._ReAssign != value))
				{
					this.OnReAssignChanging(value);
					this.SendPropertyChanging();
					this._ReAssign = value;
					this.SendPropertyChanged("ReAssign");
					this.OnReAssignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_TestReport", Storage="_TestReport", ThisKey="AssignmentID", OtherKey="AssignmentID", IsUnique=true, IsForeignKey=false)]
		public TestReport TestReport
		{
			get
			{
				return this._TestReport.Entity;
			}
			set
			{
				TestReport previousValue = this._TestReport.Entity;
				if (((previousValue != value) 
							|| (this._TestReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestReport.Entity = null;
						previousValue.Assignment = null;
					}
					this._TestReport.Entity = value;
					if ((value != null))
					{
						value.Assignment = this;
					}
					this.SendPropertyChanged("TestReport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Assignment", Storage="_Request", ThisKey="AssignmentID", OtherKey="RequestID", IsForeignKey=true)]
		public Request Request
		{
			get
			{
				return this._Request.Entity;
			}
			set
			{
				Request previousValue = this._Request.Entity;
				if (((previousValue != value) 
							|| (this._Request.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Request.Entity = null;
						previousValue.Assignment = null;
					}
					this._Request.Entity = value;
					if ((value != null))
					{
						value.Assignment = this;
						this._AssignmentID = value.RequestID;
					}
					else
					{
						this._AssignmentID = default(int);
					}
					this.SendPropertyChanged("Request");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment", Storage="_Staff", ThisKey="AssignStaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._AssignStaffID = value.StaffID;
					}
					else
					{
						this._AssignStaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment1", Storage="_Staff1", ThisKey="TestStaffID1", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Assignments1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Assignments1.Add(this);
						this._TestStaffID1 = value.StaffID;
					}
					else
					{
						this._TestStaffID1 = default(string);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment2", Storage="_Staff2", ThisKey="TestStaffID2", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff2
		{
			get
			{
				return this._Staff2.Entity;
			}
			set
			{
				Staff previousValue = this._Staff2.Entity;
				if (((previousValue != value) 
							|| (this._Staff2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff2.Entity = null;
						previousValue.Assignments2.Remove(this);
					}
					this._Staff2.Entity = value;
					if ((value != null))
					{
						value.Assignments2.Add(this);
						this._TestStaffID2 = value.StaffID;
					}
					else
					{
						this._TestStaffID2 = default(string);
					}
					this.SendPropertyChanged("Staff2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment3", Storage="_Staff3", ThisKey="TestStaffID1", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff3
		{
			get
			{
				return this._Staff3.Entity;
			}
			set
			{
				Staff previousValue = this._Staff3.Entity;
				if (((previousValue != value) 
							|| (this._Staff3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff3.Entity = null;
						previousValue.Assignments3.Remove(this);
					}
					this._Staff3.Entity = value;
					if ((value != null))
					{
						value.Assignments3.Add(this);
						this._TestStaffID1 = value.StaffID;
					}
					else
					{
						this._TestStaffID1 = default(string);
					}
					this.SendPropertyChanged("Staff3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment4", Storage="_Staff4", ThisKey="TestStaffID2", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff4
		{
			get
			{
				return this._Staff4.Entity;
			}
			set
			{
				Staff previousValue = this._Staff4.Entity;
				if (((previousValue != value) 
							|| (this._Staff4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff4.Entity = null;
						previousValue.Assignments4.Remove(this);
					}
					this._Staff4.Entity = value;
					if ((value != null))
					{
						value.Assignments4.Add(this);
						this._TestStaffID2 = value.StaffID;
					}
					else
					{
						this._TestStaffID2 = default(string);
					}
					this.SendPropertyChanged("Staff4");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authorize")]
	public partial class Authorize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorizeID;
		
		private string _StaffID;
		
		private int _RoleID;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<bool> _Invalid;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizeIDChanging(int value);
    partial void OnAuthorizeIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnInvalidChanging(System.Nullable<bool> value);
    partial void OnInvalidChanged();
    #endregion
		
		public Authorize()
		{
			this._Role = default(EntityRef<Role>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorizeID
		{
			get
			{
				return this._AuthorizeID;
			}
			set
			{
				if ((this._AuthorizeID != value))
				{
					this.OnAuthorizeIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorizeID = value;
					this.SendPropertyChanged("AuthorizeID");
					this.OnAuthorizeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Bit")]
		public System.Nullable<bool> Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Authorize", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Authorizes.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Authorizes.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Authorize", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Authorizes.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Authorizes.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calibration")]
	public partial class Calibration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CalibID;
		
		private System.Nullable<int> _TestSysID;
		
		private string _CalibNo;
		
		private string _CalibFrom;
		
		private System.Nullable<System.DateTime> _CalibDate;
		
		private System.Nullable<System.DateTime> _EndValidDate;
		
		private string _Note;
		
		private EntityRef<TestSystem> _TestSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalibIDChanging(int value);
    partial void OnCalibIDChanged();
    partial void OnTestSysIDChanging(System.Nullable<int> value);
    partial void OnTestSysIDChanged();
    partial void OnCalibNoChanging(string value);
    partial void OnCalibNoChanged();
    partial void OnCalibFromChanging(string value);
    partial void OnCalibFromChanged();
    partial void OnCalibDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCalibDateChanged();
    partial void OnEndValidDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndValidDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Calibration()
		{
			this._TestSystem = default(EntityRef<TestSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CalibID
		{
			get
			{
				return this._CalibID;
			}
			set
			{
				if ((this._CalibID != value))
				{
					this.OnCalibIDChanging(value);
					this.SendPropertyChanging();
					this._CalibID = value;
					this.SendPropertyChanged("CalibID");
					this.OnCalibIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysID", DbType="Int")]
		public System.Nullable<int> TestSysID
		{
			get
			{
				return this._TestSysID;
			}
			set
			{
				if ((this._TestSysID != value))
				{
					if (this._TestSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestSysIDChanging(value);
					this.SendPropertyChanging();
					this._TestSysID = value;
					this.SendPropertyChanged("TestSysID");
					this.OnTestSysIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibNo", DbType="NVarChar(50)")]
		public string CalibNo
		{
			get
			{
				return this._CalibNo;
			}
			set
			{
				if ((this._CalibNo != value))
				{
					this.OnCalibNoChanging(value);
					this.SendPropertyChanging();
					this._CalibNo = value;
					this.SendPropertyChanged("CalibNo");
					this.OnCalibNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibFrom", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string CalibFrom
		{
			get
			{
				return this._CalibFrom;
			}
			set
			{
				if ((this._CalibFrom != value))
				{
					this.OnCalibFromChanging(value);
					this.SendPropertyChanging();
					this._CalibFrom = value;
					this.SendPropertyChanged("CalibFrom");
					this.OnCalibFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibDate", DbType="Date")]
		public System.Nullable<System.DateTime> CalibDate
		{
			get
			{
				return this._CalibDate;
			}
			set
			{
				if ((this._CalibDate != value))
				{
					this.OnCalibDateChanging(value);
					this.SendPropertyChanging();
					this._CalibDate = value;
					this.SendPropertyChanged("CalibDate");
					this.OnCalibDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndValidDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndValidDate
		{
			get
			{
				return this._EndValidDate;
			}
			set
			{
				if ((this._EndValidDate != value))
				{
					this.OnEndValidDateChanging(value);
					this.SendPropertyChanging();
					this._EndValidDate = value;
					this.SendPropertyChanged("EndValidDate");
					this.OnEndValidDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystem_Calibration", Storage="_TestSystem", ThisKey="TestSysID", OtherKey="TestSysID", IsForeignKey=true)]
		public TestSystem TestSystem
		{
			get
			{
				return this._TestSystem.Entity;
			}
			set
			{
				TestSystem previousValue = this._TestSystem.Entity;
				if (((previousValue != value) 
							|| (this._TestSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSystem.Entity = null;
						previousValue.Calibrations.Remove(this);
					}
					this._TestSystem.Entity = value;
					if ((value != null))
					{
						value.Calibrations.Add(this);
						this._TestSysID = value.TestSysID;
					}
					else
					{
						this._TestSysID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _CompanyName;
		
		private string _FastCompanyName;
		
		private string _Address;
		
		private System.Nullable<int> _ProvinceID;
		
		private string _PhoneNo;
		
		private string _FaxNo;
		
		private string _TaxCode;
		
		private int _Invalid;
		
		private string _Contract;
		
		private EntitySet<Contact> _Contacts;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Request> _Requests1;
		
		private EntityRef<Province> _Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnFastCompanyNameChanging(string value);
    partial void OnFastCompanyNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnProvinceIDChanging(System.Nullable<int> value);
    partial void OnProvinceIDChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnFaxNoChanging(string value);
    partial void OnFaxNoChanged();
    partial void OnTaxCodeChanging(string value);
    partial void OnTaxCodeChanged();
    partial void OnInvalidChanging(int value);
    partial void OnInvalidChanged();
    partial void OnContractChanging(string value);
    partial void OnContractChanged();
    #endregion
		
		public Company()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Requests1 = new EntitySet<Request>(new Action<Request>(this.attach_Requests1), new Action<Request>(this.detach_Requests1));
			this._Province = default(EntityRef<Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FastCompanyName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string FastCompanyName
		{
			get
			{
				return this._FastCompanyName;
			}
			set
			{
				if ((this._FastCompanyName != value))
				{
					this.OnFastCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._FastCompanyName = value;
					this.SendPropertyChanged("FastCompanyName");
					this.OnFastCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="Int")]
		public System.Nullable<int> ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string FaxNo
		{
			get
			{
				return this._FaxNo;
			}
			set
			{
				if ((this._FaxNo != value))
				{
					this.OnFaxNoChanging(value);
					this.SendPropertyChanging();
					this._FaxNo = value;
					this.SendPropertyChanged("FaxNo");
					this.OnFaxNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxCode", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TaxCode
		{
			get
			{
				return this._TaxCode;
			}
			set
			{
				if ((this._TaxCode != value))
				{
					this.OnTaxCodeChanging(value);
					this.SendPropertyChanging();
					this._TaxCode = value;
					this.SendPropertyChanged("TaxCode");
					this.OnTaxCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Int NOT NULL")]
		public int Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract", DbType="NVarChar(50)")]
		public string Contract
		{
			get
			{
				return this._Contract;
			}
			set
			{
				if ((this._Contract != value))
				{
					this.OnContractChanging(value);
					this.SendPropertyChanging();
					this._Contract = value;
					this.SendPropertyChanged("Contract");
					this.OnContractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Contact", Storage="_Contacts", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Request", Storage="_Requests", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Request1", Storage="_Requests1", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Request> Requests1
		{
			get
			{
				return this._Requests1;
			}
			set
			{
				this._Requests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Company", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Requests1(Request entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = this;
		}
		
		private void detach_Requests1(Request entity)
		{
			this.SendPropertyChanging();
			entity.Company1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private int _CompanyID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FullName;
		
		private string _ContactPhone;
		
		private int _Invalid;
		
		private EntitySet<Request> _Requests;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnInvalidChanging(int value);
    partial void OnInvalidChanged();
    #endregion
		
		public Contact()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Int NOT NULL")]
		public int Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Request", Storage="_Requests", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Contact", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryName;
		
		private EntitySet<Request> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Request", Storage="_Requests", ThisKey="CountryID", OtherKey="MadeInID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EffectToSys")]
	public partial class EffectToSy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EffectID;
		
		private string _EffectName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEffectIDChanging(int value);
    partial void OnEffectIDChanged();
    partial void OnEffectNameChanging(string value);
    partial void OnEffectNameChanged();
    #endregion
		
		public EffectToSy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EffectID
		{
			get
			{
				return this._EffectID;
			}
			set
			{
				if ((this._EffectID != value))
				{
					this.OnEffectIDChanging(value);
					this.SendPropertyChanging();
					this._EffectID = value;
					this.SendPropertyChanged("EffectID");
					this.OnEffectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string EffectName
		{
			get
			{
				return this._EffectName;
			}
			set
			{
				if ((this._EffectName != value))
				{
					this.OnEffectNameChanging(value);
					this.SendPropertyChanging();
					this._EffectName = value;
					this.SendPropertyChanged("EffectName");
					this.OnEffectNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Environment")]
	public partial class Environment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _date;
		
		private string _tMor;
		
		private string _hMor;
		
		private string _tAft;
		
		private string _hAft;
		
		private string _StaffMor;
		
		private string _StaffAft;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OntMorChanging(string value);
    partial void OntMorChanged();
    partial void OnhMorChanging(string value);
    partial void OnhMorChanged();
    partial void OntAftChanging(string value);
    partial void OntAftChanged();
    partial void OnhAftChanging(string value);
    partial void OnhAftChanged();
    partial void OnStaffMorChanging(string value);
    partial void OnStaffMorChanged();
    partial void OnStaffAftChanging(string value);
    partial void OnStaffAftChanged();
    #endregion
		
		public Environment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tMor", DbType="NVarChar(50)")]
		public string tMor
		{
			get
			{
				return this._tMor;
			}
			set
			{
				if ((this._tMor != value))
				{
					this.OntMorChanging(value);
					this.SendPropertyChanging();
					this._tMor = value;
					this.SendPropertyChanged("tMor");
					this.OntMorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hMor", DbType="NVarChar(50)")]
		public string hMor
		{
			get
			{
				return this._hMor;
			}
			set
			{
				if ((this._hMor != value))
				{
					this.OnhMorChanging(value);
					this.SendPropertyChanging();
					this._hMor = value;
					this.SendPropertyChanged("hMor");
					this.OnhMorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tAft", DbType="NVarChar(50)")]
		public string tAft
		{
			get
			{
				return this._tAft;
			}
			set
			{
				if ((this._tAft != value))
				{
					this.OntAftChanging(value);
					this.SendPropertyChanging();
					this._tAft = value;
					this.SendPropertyChanged("tAft");
					this.OntAftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hAft", DbType="NVarChar(50)")]
		public string hAft
		{
			get
			{
				return this._hAft;
			}
			set
			{
				if ((this._hAft != value))
				{
					this.OnhAftChanging(value);
					this.SendPropertyChanging();
					this._hAft = value;
					this.SendPropertyChanged("hAft");
					this.OnhAftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffMor", DbType="NVarChar(30)")]
		public string StaffMor
		{
			get
			{
				return this._StaffMor;
			}
			set
			{
				if ((this._StaffMor != value))
				{
					this.OnStaffMorChanging(value);
					this.SendPropertyChanging();
					this._StaffMor = value;
					this.SendPropertyChanged("StaffMor");
					this.OnStaffMorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffAft", DbType="NVarChar(30)")]
		public string StaffAft
		{
			get
			{
				return this._StaffAft;
			}
			set
			{
				if ((this._StaffAft != value))
				{
					this.OnStaffAftChanging(value);
					this.SendPropertyChanging();
					this._StaffAft = value;
					this.SendPropertyChanged("StaffAft");
					this.OnStaffAftChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentType")]
	public partial class EquipmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EquTypeID;
		
		private System.Nullable<int> _GroupID;
		
		private string _EquTypeName;
		
		private string _EquTypeDisplayName;
		
		private string _BriefName;
		
		private string _Standards;
		
		private string _TestMethod;
		
		private float _Price;
		
		private string _PriceInText;
		
		private string _Info;
		
		private System.Nullable<System.DateTime> _InitDate;
		
		private System.Nullable<int> _Invalid;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Skill> _Skills;
		
		private EntityRef<GroupEquipment> _GroupEquipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquTypeIDChanging(string value);
    partial void OnEquTypeIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnEquTypeNameChanging(string value);
    partial void OnEquTypeNameChanged();
    partial void OnEquTypeDisplayNameChanging(string value);
    partial void OnEquTypeDisplayNameChanged();
    partial void OnBriefNameChanging(string value);
    partial void OnBriefNameChanged();
    partial void OnStandardsChanging(string value);
    partial void OnStandardsChanged();
    partial void OnTestMethodChanging(string value);
    partial void OnTestMethodChanged();
    partial void OnPriceChanging(float value);
    partial void OnPriceChanged();
    partial void OnPriceInTextChanging(string value);
    partial void OnPriceInTextChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnInitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInitDateChanged();
    partial void OnInvalidChanging(System.Nullable<int> value);
    partial void OnInvalidChanged();
    #endregion
		
		public EquipmentType()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Skills = new EntitySet<Skill>(new Action<Skill>(this.attach_Skills), new Action<Skill>(this.detach_Skills));
			this._GroupEquipment = default(EntityRef<GroupEquipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EquTypeID
		{
			get
			{
				return this._EquTypeID;
			}
			set
			{
				if ((this._EquTypeID != value))
				{
					this.OnEquTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EquTypeID = value;
					this.SendPropertyChanged("EquTypeID");
					this.OnEquTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._GroupEquipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EquTypeName
		{
			get
			{
				return this._EquTypeName;
			}
			set
			{
				if ((this._EquTypeName != value))
				{
					this.OnEquTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EquTypeName = value;
					this.SendPropertyChanged("EquTypeName");
					this.OnEquTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeDisplayName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string EquTypeDisplayName
		{
			get
			{
				return this._EquTypeDisplayName;
			}
			set
			{
				if ((this._EquTypeDisplayName != value))
				{
					this.OnEquTypeDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._EquTypeDisplayName = value;
					this.SendPropertyChanged("EquTypeDisplayName");
					this.OnEquTypeDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BriefName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string BriefName
		{
			get
			{
				return this._BriefName;
			}
			set
			{
				if ((this._BriefName != value))
				{
					this.OnBriefNameChanging(value);
					this.SendPropertyChanging();
					this._BriefName = value;
					this.SendPropertyChanged("BriefName");
					this.OnBriefNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Standards", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Standards
		{
			get
			{
				return this._Standards;
			}
			set
			{
				if ((this._Standards != value))
				{
					this.OnStandardsChanging(value);
					this.SendPropertyChanging();
					this._Standards = value;
					this.SendPropertyChanged("Standards");
					this.OnStandardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestMethod", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TestMethod
		{
			get
			{
				return this._TestMethod;
			}
			set
			{
				if ((this._TestMethod != value))
				{
					this.OnTestMethodChanging(value);
					this.SendPropertyChanging();
					this._TestMethod = value;
					this.SendPropertyChanged("TestMethod");
					this.OnTestMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Real NOT NULL")]
		public float Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceInText", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PriceInText
		{
			get
			{
				return this._PriceInText;
			}
			set
			{
				if ((this._PriceInText != value))
				{
					this.OnPriceInTextChanging(value);
					this.SendPropertyChanging();
					this._PriceInText = value;
					this.SendPropertyChanged("PriceInText");
					this.OnPriceInTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitDate", DbType="Date")]
		public System.Nullable<System.DateTime> InitDate
		{
			get
			{
				return this._InitDate;
			}
			set
			{
				if ((this._InitDate != value))
				{
					this.OnInitDateChanging(value);
					this.SendPropertyChanging();
					this._InitDate = value;
					this.SendPropertyChanged("InitDate");
					this.OnInitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Int")]
		public System.Nullable<int> Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Request", Storage="_Requests", ThisKey="EquTypeID", OtherKey="EquTypeID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Skill", Storage="_Skills", ThisKey="EquTypeID", OtherKey="EquTypeID")]
		public EntitySet<Skill> Skills
		{
			get
			{
				return this._Skills;
			}
			set
			{
				this._Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupEquipment_EquipmentType", Storage="_GroupEquipment", ThisKey="GroupID", OtherKey="GroupEquID", IsForeignKey=true)]
		public GroupEquipment GroupEquipment
		{
			get
			{
				return this._GroupEquipment.Entity;
			}
			set
			{
				GroupEquipment previousValue = this._GroupEquipment.Entity;
				if (((previousValue != value) 
							|| (this._GroupEquipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupEquipment.Entity = null;
						previousValue.EquipmentTypes.Remove(this);
					}
					this._GroupEquipment.Entity = value;
					if ((value != null))
					{
						value.EquipmentTypes.Add(this);
						this._GroupID = value.GroupEquID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupEquipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = null;
		}
		
		private void attach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = this;
		}
		
		private void detach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupEquipment")]
	public partial class GroupEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupEquID;
		
		private string _GroupEquName;
		
		private EntitySet<EquipmentType> _EquipmentTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupEquIDChanging(int value);
    partial void OnGroupEquIDChanged();
    partial void OnGroupEquNameChanging(string value);
    partial void OnGroupEquNameChanged();
    #endregion
		
		public GroupEquipment()
		{
			this._EquipmentTypes = new EntitySet<EquipmentType>(new Action<EquipmentType>(this.attach_EquipmentTypes), new Action<EquipmentType>(this.detach_EquipmentTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupEquID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupEquID
		{
			get
			{
				return this._GroupEquID;
			}
			set
			{
				if ((this._GroupEquID != value))
				{
					this.OnGroupEquIDChanging(value);
					this.SendPropertyChanging();
					this._GroupEquID = value;
					this.SendPropertyChanged("GroupEquID");
					this.OnGroupEquIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupEquName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string GroupEquName
		{
			get
			{
				return this._GroupEquName;
			}
			set
			{
				if ((this._GroupEquName != value))
				{
					this.OnGroupEquNameChanging(value);
					this.SendPropertyChanging();
					this._GroupEquName = value;
					this.SendPropertyChanged("GroupEquName");
					this.OnGroupEquNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupEquipment_EquipmentType", Storage="_EquipmentTypes", ThisKey="GroupEquID", OtherKey="GroupID")]
		public EntitySet<EquipmentType> EquipmentTypes
		{
			get
			{
				return this._EquipmentTypes;
			}
			set
			{
				this._EquipmentTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentTypes(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.GroupEquipment = this;
		}
		
		private void detach_EquipmentTypes(EquipmentType entity)
		{
			this.SendPropertyChanging();
			entity.GroupEquipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Handover")]
	public partial class Handover : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HandoverID;
		
		private string _HandoverNo;
		
		private System.Nullable<System.DateTime> _HandoverDate;
		
		private System.Nullable<System.DateTime> _HandoverReceiveEx;
		
		private System.Nullable<System.DateTime> _HandoverReceiveRe;
		
		private string _ReceiveStaffID;
		
		private string _CompanyName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _PerName;
		
		private string _Position;
		
		private string _PerID;
		
		private string _PerPhoneNo;
		
		private System.Nullable<int> _HandoverStatusID;
		
		private string _HandoverStaffID;
		
		private string _Note;
		
		private EntitySet<HandoverAcc> _HandoverAccs;
		
		private EntityRef<HandoverStatus> _HandoverStatus;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandoverIDChanging(int value);
    partial void OnHandoverIDChanged();
    partial void OnHandoverNoChanging(string value);
    partial void OnHandoverNoChanged();
    partial void OnHandoverDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHandoverDateChanged();
    partial void OnHandoverReceiveExChanging(System.Nullable<System.DateTime> value);
    partial void OnHandoverReceiveExChanged();
    partial void OnHandoverReceiveReChanging(System.Nullable<System.DateTime> value);
    partial void OnHandoverReceiveReChanged();
    partial void OnReceiveStaffIDChanging(string value);
    partial void OnReceiveStaffIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnPerNameChanging(string value);
    partial void OnPerNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPerIDChanging(string value);
    partial void OnPerIDChanged();
    partial void OnPerPhoneNoChanging(string value);
    partial void OnPerPhoneNoChanged();
    partial void OnHandoverStatusIDChanging(System.Nullable<int> value);
    partial void OnHandoverStatusIDChanged();
    partial void OnHandoverStaffIDChanging(string value);
    partial void OnHandoverStaffIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Handover()
		{
			this._HandoverAccs = new EntitySet<HandoverAcc>(new Action<HandoverAcc>(this.attach_HandoverAccs), new Action<HandoverAcc>(this.detach_HandoverAccs));
			this._HandoverStatus = default(EntityRef<HandoverStatus>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HandoverID
		{
			get
			{
				return this._HandoverID;
			}
			set
			{
				if ((this._HandoverID != value))
				{
					this.OnHandoverIDChanging(value);
					this.SendPropertyChanging();
					this._HandoverID = value;
					this.SendPropertyChanged("HandoverID");
					this.OnHandoverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverNo", DbType="NVarChar(50)")]
		public string HandoverNo
		{
			get
			{
				return this._HandoverNo;
			}
			set
			{
				if ((this._HandoverNo != value))
				{
					this.OnHandoverNoChanging(value);
					this.SendPropertyChanging();
					this._HandoverNo = value;
					this.SendPropertyChanged("HandoverNo");
					this.OnHandoverNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverDate", DbType="Date")]
		public System.Nullable<System.DateTime> HandoverDate
		{
			get
			{
				return this._HandoverDate;
			}
			set
			{
				if ((this._HandoverDate != value))
				{
					this.OnHandoverDateChanging(value);
					this.SendPropertyChanging();
					this._HandoverDate = value;
					this.SendPropertyChanged("HandoverDate");
					this.OnHandoverDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverReceiveEx", DbType="Date")]
		public System.Nullable<System.DateTime> HandoverReceiveEx
		{
			get
			{
				return this._HandoverReceiveEx;
			}
			set
			{
				if ((this._HandoverReceiveEx != value))
				{
					this.OnHandoverReceiveExChanging(value);
					this.SendPropertyChanging();
					this._HandoverReceiveEx = value;
					this.SendPropertyChanged("HandoverReceiveEx");
					this.OnHandoverReceiveExChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverReceiveRe", DbType="Date")]
		public System.Nullable<System.DateTime> HandoverReceiveRe
		{
			get
			{
				return this._HandoverReceiveRe;
			}
			set
			{
				if ((this._HandoverReceiveRe != value))
				{
					this.OnHandoverReceiveReChanging(value);
					this.SendPropertyChanging();
					this._HandoverReceiveRe = value;
					this.SendPropertyChanged("HandoverReceiveRe");
					this.OnHandoverReceiveReChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveStaffID", DbType="NVarChar(30)")]
		public string ReceiveStaffID
		{
			get
			{
				return this._ReceiveStaffID;
			}
			set
			{
				if ((this._ReceiveStaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiveStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiveStaffID = value;
					this.SendPropertyChanged("ReceiveStaffID");
					this.OnReceiveStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string PerName
		{
			get
			{
				return this._PerName;
			}
			set
			{
				if ((this._PerName != value))
				{
					this.OnPerNameChanging(value);
					this.SendPropertyChanging();
					this._PerName = value;
					this.SendPropertyChanged("PerName");
					this.OnPerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerID", DbType="NVarChar(50)")]
		public string PerID
		{
			get
			{
				return this._PerID;
			}
			set
			{
				if ((this._PerID != value))
				{
					this.OnPerIDChanging(value);
					this.SendPropertyChanging();
					this._PerID = value;
					this.SendPropertyChanged("PerID");
					this.OnPerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerPhoneNo", DbType="NVarChar(50)")]
		public string PerPhoneNo
		{
			get
			{
				return this._PerPhoneNo;
			}
			set
			{
				if ((this._PerPhoneNo != value))
				{
					this.OnPerPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PerPhoneNo = value;
					this.SendPropertyChanged("PerPhoneNo");
					this.OnPerPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverStatusID", DbType="Int")]
		public System.Nullable<int> HandoverStatusID
		{
			get
			{
				return this._HandoverStatusID;
			}
			set
			{
				if ((this._HandoverStatusID != value))
				{
					if (this._HandoverStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHandoverStatusIDChanging(value);
					this.SendPropertyChanging();
					this._HandoverStatusID = value;
					this.SendPropertyChanged("HandoverStatusID");
					this.OnHandoverStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverStaffID", DbType="NVarChar(30)")]
		public string HandoverStaffID
		{
			get
			{
				return this._HandoverStaffID;
			}
			set
			{
				if ((this._HandoverStaffID != value))
				{
					if (this._Staff1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHandoverStaffIDChanging(value);
					this.SendPropertyChanging();
					this._HandoverStaffID = value;
					this.SendPropertyChanged("HandoverStaffID");
					this.OnHandoverStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Handover_HandoverAcc", Storage="_HandoverAccs", ThisKey="HandoverID", OtherKey="HandoverID")]
		public EntitySet<HandoverAcc> HandoverAccs
		{
			get
			{
				return this._HandoverAccs;
			}
			set
			{
				this._HandoverAccs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HandoverStatus_Handover", Storage="_HandoverStatus", ThisKey="HandoverStatusID", OtherKey="HandStatusID", IsForeignKey=true)]
		public HandoverStatus HandoverStatus
		{
			get
			{
				return this._HandoverStatus.Entity;
			}
			set
			{
				HandoverStatus previousValue = this._HandoverStatus.Entity;
				if (((previousValue != value) 
							|| (this._HandoverStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HandoverStatus.Entity = null;
						previousValue.Handovers.Remove(this);
					}
					this._HandoverStatus.Entity = value;
					if ((value != null))
					{
						value.Handovers.Add(this);
						this._HandoverStatusID = value.HandStatusID;
					}
					else
					{
						this._HandoverStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("HandoverStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Handover", Storage="_Staff", ThisKey="ReceiveStaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Handovers.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Handovers.Add(this);
						this._ReceiveStaffID = value.StaffID;
					}
					else
					{
						this._ReceiveStaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Handover1", Storage="_Staff1", ThisKey="HandoverStaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Handovers1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Handovers1.Add(this);
						this._HandoverStaffID = value.StaffID;
					}
					else
					{
						this._HandoverStaffID = default(string);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.Handover = this;
		}
		
		private void detach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.Handover = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HandoverAcc")]
	public partial class HandoverAcc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HandAccID;
		
		private System.Nullable<int> _HandoverID;
		
		private System.Nullable<int> _AccID;
		
		private System.Nullable<int> _Status;
		
		private System.Nullable<int> _Invalid;
		
		private EntityRef<Handover> _Handover;
		
		private EntityRef<TestAccessory> _TestAccessory;
		
		private EntityRef<TestSysStatus> _TestSysStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandAccIDChanging(int value);
    partial void OnHandAccIDChanged();
    partial void OnHandoverIDChanging(System.Nullable<int> value);
    partial void OnHandoverIDChanged();
    partial void OnAccIDChanging(System.Nullable<int> value);
    partial void OnAccIDChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnInvalidChanging(System.Nullable<int> value);
    partial void OnInvalidChanged();
    #endregion
		
		public HandoverAcc()
		{
			this._Handover = default(EntityRef<Handover>);
			this._TestAccessory = default(EntityRef<TestAccessory>);
			this._TestSysStatus = default(EntityRef<TestSysStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandAccID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HandAccID
		{
			get
			{
				return this._HandAccID;
			}
			set
			{
				if ((this._HandAccID != value))
				{
					this.OnHandAccIDChanging(value);
					this.SendPropertyChanging();
					this._HandAccID = value;
					this.SendPropertyChanged("HandAccID");
					this.OnHandAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverID", DbType="Int")]
		public System.Nullable<int> HandoverID
		{
			get
			{
				return this._HandoverID;
			}
			set
			{
				if ((this._HandoverID != value))
				{
					if (this._Handover.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHandoverIDChanging(value);
					this.SendPropertyChanging();
					this._HandoverID = value;
					this.SendPropertyChanged("HandoverID");
					this.OnHandoverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int")]
		public System.Nullable<int> AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					if (this._TestAccessory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._TestSysStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Int")]
		public System.Nullable<int> Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Handover_HandoverAcc", Storage="_Handover", ThisKey="HandoverID", OtherKey="HandoverID", IsForeignKey=true)]
		public Handover Handover
		{
			get
			{
				return this._Handover.Entity;
			}
			set
			{
				Handover previousValue = this._Handover.Entity;
				if (((previousValue != value) 
							|| (this._Handover.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Handover.Entity = null;
						previousValue.HandoverAccs.Remove(this);
					}
					this._Handover.Entity = value;
					if ((value != null))
					{
						value.HandoverAccs.Add(this);
						this._HandoverID = value.HandoverID;
					}
					else
					{
						this._HandoverID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Handover");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestAccessory_HandoverAcc", Storage="_TestAccessory", ThisKey="AccID", OtherKey="AccID", IsForeignKey=true)]
		public TestAccessory TestAccessory
		{
			get
			{
				return this._TestAccessory.Entity;
			}
			set
			{
				TestAccessory previousValue = this._TestAccessory.Entity;
				if (((previousValue != value) 
							|| (this._TestAccessory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestAccessory.Entity = null;
						previousValue.HandoverAccs.Remove(this);
					}
					this._TestAccessory.Entity = value;
					if ((value != null))
					{
						value.HandoverAccs.Add(this);
						this._AccID = value.AccID;
					}
					else
					{
						this._AccID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestAccessory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_HandoverAcc", Storage="_TestSysStatus", ThisKey="Status", OtherKey="TestSysStatusID", IsForeignKey=true)]
		public TestSysStatus TestSysStatus
		{
			get
			{
				return this._TestSysStatus.Entity;
			}
			set
			{
				TestSysStatus previousValue = this._TestSysStatus.Entity;
				if (((previousValue != value) 
							|| (this._TestSysStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSysStatus.Entity = null;
						previousValue.HandoverAccs.Remove(this);
					}
					this._TestSysStatus.Entity = value;
					if ((value != null))
					{
						value.HandoverAccs.Add(this);
						this._Status = value.TestSysStatusID;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSysStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HandoverStatus")]
	public partial class HandoverStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HandStatusID;
		
		private string _HandStatusName;
		
		private EntitySet<Handover> _Handovers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHandStatusIDChanging(int value);
    partial void OnHandStatusIDChanged();
    partial void OnHandStatusNameChanging(string value);
    partial void OnHandStatusNameChanged();
    #endregion
		
		public HandoverStatus()
		{
			this._Handovers = new EntitySet<Handover>(new Action<Handover>(this.attach_Handovers), new Action<Handover>(this.detach_Handovers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HandStatusID
		{
			get
			{
				return this._HandStatusID;
			}
			set
			{
				if ((this._HandStatusID != value))
				{
					this.OnHandStatusIDChanging(value);
					this.SendPropertyChanging();
					this._HandStatusID = value;
					this.SendPropertyChanged("HandStatusID");
					this.OnHandStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandStatusName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string HandStatusName
		{
			get
			{
				return this._HandStatusName;
			}
			set
			{
				if ((this._HandStatusName != value))
				{
					this.OnHandStatusNameChanging(value);
					this.SendPropertyChanging();
					this._HandStatusName = value;
					this.SendPropertyChanged("HandStatusName");
					this.OnHandStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HandoverStatus_Handover", Storage="_Handovers", ThisKey="HandStatusID", OtherKey="HandoverStatusID")]
		public EntitySet<Handover> Handovers
		{
			get
			{
				return this._Handovers;
			}
			set
			{
				this._Handovers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Handovers(Handover entity)
		{
			this.SendPropertyChanging();
			entity.HandoverStatus = this;
		}
		
		private void detach_Handovers(Handover entity)
		{
			this.SendPropertyChanging();
			entity.HandoverStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Incident")]
	public partial class Incident
	{
		
		private int _IncidentID;
		
		private System.Nullable<int> _AccID;
		
		private string _IncidentName;
		
		private string _Detail;
		
		private string _Solve;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<int> _EffectToSysID;
		
		private System.Nullable<System.DateTime> _SolveDate;
		
		private System.Nullable<System.DateTime> _IncidentDate;
		
		private System.Nullable<System.DateTime> _InitDate;
		
		public Incident()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int IncidentID
		{
			get
			{
				return this._IncidentID;
			}
			set
			{
				if ((this._IncidentID != value))
				{
					this._IncidentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", DbType="Int")]
		public System.Nullable<int> AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this._AccID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string IncidentName
		{
			get
			{
				return this._IncidentName;
			}
			set
			{
				if ((this._IncidentName != value))
				{
					this._IncidentName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this._Detail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solve", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Solve
		{
			get
			{
				return this._Solve;
			}
			set
			{
				if ((this._Solve != value))
				{
					this._Solve = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectToSysID", DbType="Int")]
		public System.Nullable<int> EffectToSysID
		{
			get
			{
				return this._EffectToSysID;
			}
			set
			{
				if ((this._EffectToSysID != value))
				{
					this._EffectToSysID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolveDate", DbType="Date")]
		public System.Nullable<System.DateTime> SolveDate
		{
			get
			{
				return this._SolveDate;
			}
			set
			{
				if ((this._SolveDate != value))
				{
					this._SolveDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentDate", DbType="Date")]
		public System.Nullable<System.DateTime> IncidentDate
		{
			get
			{
				return this._IncidentDate;
			}
			set
			{
				if ((this._IncidentDate != value))
				{
					this._IncidentDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitDate", DbType="Date")]
		public System.Nullable<System.DateTime> InitDate
		{
			get
			{
				return this._InitDate;
			}
			set
			{
				if ((this._InitDate != value))
				{
					this._InitDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncidentStatus")]
	public partial class IncidentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncidentStatusID;
		
		private string _IncidentStatusName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentStatusIDChanging(int value);
    partial void OnIncidentStatusIDChanged();
    partial void OnIncidentStatusNameChanging(string value);
    partial void OnIncidentStatusNameChanged();
    #endregion
		
		public IncidentStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncidentStatusID
		{
			get
			{
				return this._IncidentStatusID;
			}
			set
			{
				if ((this._IncidentStatusID != value))
				{
					this.OnIncidentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentStatusID = value;
					this.SendPropertyChanged("IncidentStatusID");
					this.OnIncidentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentStatusName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string IncidentStatusName
		{
			get
			{
				return this._IncidentStatusName;
			}
			set
			{
				if ((this._IncidentStatusName != value))
				{
					this.OnIncidentStatusNameChanging(value);
					this.SendPropertyChanging();
					this._IncidentStatusName = value;
					this.SendPropertyChanged("IncidentStatusName");
					this.OnIncidentStatusNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Number")]
	public partial class Number : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RequestNo;
		
		private string _BillNo;
		
		private string _TestNo;
		
		private string _Year;
		
		private string _YearFull;
		
		private string _TestSysNum;
		
		private string _TestAccNum;
		
		private string _HandoverNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRequestNoChanging(string value);
    partial void OnRequestNoChanged();
    partial void OnBillNoChanging(string value);
    partial void OnBillNoChanged();
    partial void OnTestNoChanging(string value);
    partial void OnTestNoChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnYearFullChanging(string value);
    partial void OnYearFullChanged();
    partial void OnTestSysNumChanging(string value);
    partial void OnTestSysNumChanged();
    partial void OnTestAccNumChanging(string value);
    partial void OnTestAccNumChanged();
    partial void OnHandoverNoChanging(string value);
    partial void OnHandoverNoChanged();
    #endregion
		
		public Number()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestNo", DbType="NVarChar(50)")]
		public string RequestNo
		{
			get
			{
				return this._RequestNo;
			}
			set
			{
				if ((this._RequestNo != value))
				{
					this.OnRequestNoChanging(value);
					this.SendPropertyChanging();
					this._RequestNo = value;
					this.SendPropertyChanged("RequestNo");
					this.OnRequestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillNo", DbType="NVarChar(50)")]
		public string BillNo
		{
			get
			{
				return this._BillNo;
			}
			set
			{
				if ((this._BillNo != value))
				{
					this.OnBillNoChanging(value);
					this.SendPropertyChanging();
					this._BillNo = value;
					this.SendPropertyChanged("BillNo");
					this.OnBillNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestNo", DbType="NVarChar(50)")]
		public string TestNo
		{
			get
			{
				return this._TestNo;
			}
			set
			{
				if ((this._TestNo != value))
				{
					this.OnTestNoChanging(value);
					this.SendPropertyChanging();
					this._TestNo = value;
					this.SendPropertyChanged("TestNo");
					this.OnTestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(50)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearFull", DbType="NVarChar(50)")]
		public string YearFull
		{
			get
			{
				return this._YearFull;
			}
			set
			{
				if ((this._YearFull != value))
				{
					this.OnYearFullChanging(value);
					this.SendPropertyChanging();
					this._YearFull = value;
					this.SendPropertyChanged("YearFull");
					this.OnYearFullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysNum", DbType="NVarChar(50)")]
		public string TestSysNum
		{
			get
			{
				return this._TestSysNum;
			}
			set
			{
				if ((this._TestSysNum != value))
				{
					this.OnTestSysNumChanging(value);
					this.SendPropertyChanging();
					this._TestSysNum = value;
					this.SendPropertyChanged("TestSysNum");
					this.OnTestSysNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestAccNum", DbType="NVarChar(50)")]
		public string TestAccNum
		{
			get
			{
				return this._TestAccNum;
			}
			set
			{
				if ((this._TestAccNum != value))
				{
					this.OnTestAccNumChanging(value);
					this.SendPropertyChanging();
					this._TestAccNum = value;
					this.SendPropertyChanged("TestAccNum");
					this.OnTestAccNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HandoverNo", DbType="NVarChar(50)")]
		public string HandoverNo
		{
			get
			{
				return this._HandoverNo;
			}
			set
			{
				if ((this._HandoverNo != value))
				{
					this.OnHandoverNoChanging(value);
					this.SendPropertyChanging();
					this._HandoverNo = value;
					this.SendPropertyChanged("HandoverNo");
					this.OnHandoverNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderSt")]
	public partial class OrderSt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private string _StaffID;
		
		private System.Nullable<int> _StID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _Year;
		
		private string _Note;
		
		private System.Nullable<int> _OrderStID;
		
		private System.Nullable<int> _Invalid;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Stationery> _Stationery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStIDChanging(System.Nullable<int> value);
    partial void OnStIDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnMonthChanging(System.Nullable<int> value);
    partial void OnMonthChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnOrderStIDChanging(System.Nullable<int> value);
    partial void OnOrderStIDChanged();
    partial void OnInvalidChanging(System.Nullable<int> value);
    partial void OnInvalidChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    #endregion
		
		public OrderSt()
		{
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._Staff = default(EntityRef<Staff>);
			this._Stationery = default(EntityRef<Stationery>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(30)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StID", DbType="Int")]
		public System.Nullable<int> StID
		{
			get
			{
				return this._StID;
			}
			set
			{
				if ((this._StID != value))
				{
					if (this._Stationery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStIDChanging(value);
					this.SendPropertyChanging();
					this._StID = value;
					this.SendPropertyChanged("StID");
					this.OnStIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStID", DbType="Int")]
		public System.Nullable<int> OrderStID
		{
			get
			{
				return this._OrderStID;
			}
			set
			{
				if ((this._OrderStID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStID = value;
					this.SendPropertyChanged("OrderStID");
					this.OnOrderStIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Int")]
		public System.Nullable<int> Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="Date")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderSt", Storage="_OrderStatus", ThisKey="OrderStID", OtherKey="OrderStID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.OrderSts.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrderSts.Add(this);
						this._OrderStID = value.OrderStID;
					}
					else
					{
						this._OrderStID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderSt", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.OrderSts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.OrderSts.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stationery_OrderSt", Storage="_Stationery", ThisKey="StID", OtherKey="StID", IsForeignKey=true)]
		public Stationery Stationery
		{
			get
			{
				return this._Stationery.Entity;
			}
			set
			{
				Stationery previousValue = this._Stationery.Entity;
				if (((previousValue != value) 
							|| (this._Stationery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stationery.Entity = null;
						previousValue.OrderSts.Remove(this);
					}
					this._Stationery.Entity = value;
					if ((value != null))
					{
						value.OrderSts.Add(this);
						this._StID = value.StID;
					}
					else
					{
						this._StID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Stationery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStID;
		
		private string _OrderStName;
		
		private EntitySet<OrderSt> _OrderSts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStIDChanging(int value);
    partial void OnOrderStIDChanged();
    partial void OnOrderStNameChanging(string value);
    partial void OnOrderStNameChanged();
    #endregion
		
		public OrderStatus()
		{
			this._OrderSts = new EntitySet<OrderSt>(new Action<OrderSt>(this.attach_OrderSts), new Action<OrderSt>(this.detach_OrderSts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderStID
		{
			get
			{
				return this._OrderStID;
			}
			set
			{
				if ((this._OrderStID != value))
				{
					this.OnOrderStIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStID = value;
					this.SendPropertyChanged("OrderStID");
					this.OnOrderStIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string OrderStName
		{
			get
			{
				return this._OrderStName;
			}
			set
			{
				if ((this._OrderStName != value))
				{
					this.OnOrderStNameChanging(value);
					this.SendPropertyChanging();
					this._OrderStName = value;
					this.SendPropertyChanged("OrderStName");
					this.OnOrderStNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderSt", Storage="_OrderSts", ThisKey="OrderStID", OtherKey="OrderStID")]
		public EntitySet<OrderSt> OrderSts
		{
			get
			{
				return this._OrderSts;
			}
			set
			{
				this._OrderSts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceID;
		
		private string _Province1;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(int value);
    partial void OnProvinceIDChanged();
    partial void OnProvince1Changing(string value);
    partial void OnProvince1Changed();
    #endregion
		
		public Province()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Province", Storage="_Province1", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Province1
		{
			get
			{
				return this._Province1;
			}
			set
			{
				if ((this._Province1 != value))
				{
					this.OnProvince1Changing(value);
					this.SendPropertyChanging();
					this._Province1 = value;
					this.SendPropertyChanged("Province1");
					this.OnProvince1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Province_Company", Storage="_Companies", ThisKey="ProvinceID", OtherKey="ProvinceID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RedBill")]
	public partial class RedBill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RedBillID;
		
		private string _RedBillNo;
		
		private System.Nullable<System.DateTime> _RedBillDate;
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<float> _PriceNonTax;
		
		private System.Nullable<float> _Tax;
		
		private System.Nullable<float> _PriceIncludeTax;
		
		private string _PriceInText;
		
		private string _Note;
		
		private System.Nullable<int> _Finish;
		
		private EntitySet<TestReport> _TestReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRedBillIDChanging(int value);
    partial void OnRedBillIDChanged();
    partial void OnRedBillNoChanging(string value);
    partial void OnRedBillNoChanged();
    partial void OnRedBillDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRedBillDateChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnPriceNonTaxChanging(System.Nullable<float> value);
    partial void OnPriceNonTaxChanged();
    partial void OnTaxChanging(System.Nullable<float> value);
    partial void OnTaxChanged();
    partial void OnPriceIncludeTaxChanging(System.Nullable<float> value);
    partial void OnPriceIncludeTaxChanged();
    partial void OnPriceInTextChanging(string value);
    partial void OnPriceInTextChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnFinishChanging(System.Nullable<int> value);
    partial void OnFinishChanged();
    #endregion
		
		public RedBill()
		{
			this._TestReports = new EntitySet<TestReport>(new Action<TestReport>(this.attach_TestReports), new Action<TestReport>(this.detach_TestReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedBillID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RedBillID
		{
			get
			{
				return this._RedBillID;
			}
			set
			{
				if ((this._RedBillID != value))
				{
					this.OnRedBillIDChanging(value);
					this.SendPropertyChanging();
					this._RedBillID = value;
					this.SendPropertyChanged("RedBillID");
					this.OnRedBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedBillNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RedBillNo
		{
			get
			{
				return this._RedBillNo;
			}
			set
			{
				if ((this._RedBillNo != value))
				{
					this.OnRedBillNoChanging(value);
					this.SendPropertyChanging();
					this._RedBillNo = value;
					this.SendPropertyChanged("RedBillNo");
					this.OnRedBillNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedBillDate", DbType="Date")]
		public System.Nullable<System.DateTime> RedBillDate
		{
			get
			{
				return this._RedBillDate;
			}
			set
			{
				if ((this._RedBillDate != value))
				{
					this.OnRedBillDateChanging(value);
					this.SendPropertyChanging();
					this._RedBillDate = value;
					this.SendPropertyChanged("RedBillDate");
					this.OnRedBillDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceNonTax", DbType="Real")]
		public System.Nullable<float> PriceNonTax
		{
			get
			{
				return this._PriceNonTax;
			}
			set
			{
				if ((this._PriceNonTax != value))
				{
					this.OnPriceNonTaxChanging(value);
					this.SendPropertyChanging();
					this._PriceNonTax = value;
					this.SendPropertyChanged("PriceNonTax");
					this.OnPriceNonTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Real")]
		public System.Nullable<float> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceIncludeTax", DbType="Real")]
		public System.Nullable<float> PriceIncludeTax
		{
			get
			{
				return this._PriceIncludeTax;
			}
			set
			{
				if ((this._PriceIncludeTax != value))
				{
					this.OnPriceIncludeTaxChanging(value);
					this.SendPropertyChanging();
					this._PriceIncludeTax = value;
					this.SendPropertyChanged("PriceIncludeTax");
					this.OnPriceIncludeTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceInText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string PriceInText
		{
			get
			{
				return this._PriceInText;
			}
			set
			{
				if ((this._PriceInText != value))
				{
					this.OnPriceInTextChanging(value);
					this.SendPropertyChanging();
					this._PriceInText = value;
					this.SendPropertyChanged("PriceInText");
					this.OnPriceInTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finish", DbType="Int")]
		public System.Nullable<int> Finish
		{
			get
			{
				return this._Finish;
			}
			set
			{
				if ((this._Finish != value))
				{
					this.OnFinishChanging(value);
					this.SendPropertyChanging();
					this._Finish = value;
					this.SendPropertyChanged("Finish");
					this.OnFinishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RedBill_TestReport", Storage="_TestReports", ThisKey="RedBillID", OtherKey="RedBillID")]
		public EntitySet<TestReport> TestReports
		{
			get
			{
				return this._TestReports;
			}
			set
			{
				this._TestReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestReports(TestReport entity)
		{
			this.SendPropertyChanging();
			entity.RedBill = this;
		}
		
		private void detach_TestReports(TestReport entity)
		{
			this.SendPropertyChanging();
			entity.RedBill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private string _RequestNo;
		
		private string _ContractNo;
		
		private string _BillNo;
		
		private System.Nullable<System.DateTime> _BillDate;
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<int> _ContactID;
		
		private string _EquTypeID;
		
		private string _EquTypeName;
		
		private string _Model;
		
		private string _Manufacturer;
		
		private System.Nullable<int> _MadeInID;
		
		private string _Serial_Imei;
		
		private string _Standards;
		
		private string _TestMethod;
		
		private string _Accessories;
		
		private System.Nullable<System.DateTime> _ReceiveDate;
		
		private string _ReceiveStaffID;
		
		private System.Nullable<System.DateTime> _AppointmentDate;
		
		private string _ReturnStaffID;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private System.Nullable<int> _StatusID;
		
		private string _Note;
		
		private System.Nullable<int> _HoldEquip;
		
		private System.Nullable<System.DateTime> _ConfirmDate;
		
		private string _InternalNote;
		
		private string _StaffIDNonIssue;
		
		private System.Nullable<System.DateTime> _NonIssueDate;
		
		private string _StaffIDApprove;
		
		private System.Nullable<System.DateTime> _ApproveNonIssueDate;
		
		private EntityRef<Assignment> _Assignment;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Company> _Company1;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<EquipmentType> _EquipmentType;
		
		private EntityRef<RequestStatus> _RequestStatus;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<Staff> _Staff1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnRequestNoChanging(string value);
    partial void OnRequestNoChanged();
    partial void OnContractNoChanging(string value);
    partial void OnContractNoChanged();
    partial void OnBillNoChanging(string value);
    partial void OnBillNoChanged();
    partial void OnBillDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBillDateChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnEquTypeIDChanging(string value);
    partial void OnEquTypeIDChanged();
    partial void OnEquTypeNameChanging(string value);
    partial void OnEquTypeNameChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnMadeInIDChanging(System.Nullable<int> value);
    partial void OnMadeInIDChanged();
    partial void OnSerial_ImeiChanging(string value);
    partial void OnSerial_ImeiChanged();
    partial void OnStandardsChanging(string value);
    partial void OnStandardsChanged();
    partial void OnTestMethodChanging(string value);
    partial void OnTestMethodChanged();
    partial void OnAccessoriesChanging(string value);
    partial void OnAccessoriesChanged();
    partial void OnReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceiveDateChanged();
    partial void OnReceiveStaffIDChanging(string value);
    partial void OnReceiveStaffIDChanged();
    partial void OnAppointmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppointmentDateChanged();
    partial void OnReturnStaffIDChanging(string value);
    partial void OnReturnStaffIDChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnHoldEquipChanging(System.Nullable<int> value);
    partial void OnHoldEquipChanged();
    partial void OnConfirmDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmDateChanged();
    partial void OnInternalNoteChanging(string value);
    partial void OnInternalNoteChanged();
    partial void OnStaffIDNonIssueChanging(string value);
    partial void OnStaffIDNonIssueChanged();
    partial void OnNonIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNonIssueDateChanged();
    partial void OnStaffIDApproveChanging(string value);
    partial void OnStaffIDApproveChanged();
    partial void OnApproveNonIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveNonIssueDateChanged();
    #endregion
		
		public Request()
		{
			this._Assignment = default(EntityRef<Assignment>);
			this._Company = default(EntityRef<Company>);
			this._Company1 = default(EntityRef<Company>);
			this._Contact = default(EntityRef<Contact>);
			this._Country = default(EntityRef<Country>);
			this._EquipmentType = default(EntityRef<EquipmentType>);
			this._RequestStatus = default(EntityRef<RequestStatus>);
			this._Staff = default(EntityRef<Staff>);
			this._Staff1 = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RequestNo
		{
			get
			{
				return this._RequestNo;
			}
			set
			{
				if ((this._RequestNo != value))
				{
					this.OnRequestNoChanging(value);
					this.SendPropertyChanging();
					this._RequestNo = value;
					this.SendPropertyChanged("RequestNo");
					this.OnRequestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNo", DbType="NVarChar(50)")]
		public string ContractNo
		{
			get
			{
				return this._ContractNo;
			}
			set
			{
				if ((this._ContractNo != value))
				{
					this.OnContractNoChanging(value);
					this.SendPropertyChanging();
					this._ContractNo = value;
					this.SendPropertyChanged("ContractNo");
					this.OnContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillNo", DbType="NVarChar(50)")]
		public string BillNo
		{
			get
			{
				return this._BillNo;
			}
			set
			{
				if ((this._BillNo != value))
				{
					this.OnBillNoChanging(value);
					this.SendPropertyChanging();
					this._BillNo = value;
					this.SendPropertyChanged("BillNo");
					this.OnBillNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillDate", DbType="Date")]
		public System.Nullable<System.DateTime> BillDate
		{
			get
			{
				return this._BillDate;
			}
			set
			{
				if ((this._BillDate != value))
				{
					this.OnBillDateChanging(value);
					this.SendPropertyChanging();
					this._BillDate = value;
					this.SendPropertyChanged("BillDate");
					this.OnBillDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if ((this._Company.HasLoadedOrAssignedValue || this._Company1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeID", DbType="NVarChar(50)")]
		public string EquTypeID
		{
			get
			{
				return this._EquTypeID;
			}
			set
			{
				if ((this._EquTypeID != value))
				{
					if (this._EquipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EquTypeID = value;
					this.SendPropertyChanged("EquTypeID");
					this.OnEquTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string EquTypeName
		{
			get
			{
				return this._EquTypeName;
			}
			set
			{
				if ((this._EquTypeName != value))
				{
					this.OnEquTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EquTypeName = value;
					this.SendPropertyChanged("EquTypeName");
					this.OnEquTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(50)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MadeInID", DbType="Int")]
		public System.Nullable<int> MadeInID
		{
			get
			{
				return this._MadeInID;
			}
			set
			{
				if ((this._MadeInID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMadeInIDChanging(value);
					this.SendPropertyChanging();
					this._MadeInID = value;
					this.SendPropertyChanged("MadeInID");
					this.OnMadeInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Serial_Imei", DbType="NVarChar(50)")]
		public string Serial_Imei
		{
			get
			{
				return this._Serial_Imei;
			}
			set
			{
				if ((this._Serial_Imei != value))
				{
					this.OnSerial_ImeiChanging(value);
					this.SendPropertyChanging();
					this._Serial_Imei = value;
					this.SendPropertyChanged("Serial_Imei");
					this.OnSerial_ImeiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Standards", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Standards
		{
			get
			{
				return this._Standards;
			}
			set
			{
				if ((this._Standards != value))
				{
					this.OnStandardsChanging(value);
					this.SendPropertyChanging();
					this._Standards = value;
					this.SendPropertyChanged("Standards");
					this.OnStandardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestMethod", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TestMethod
		{
			get
			{
				return this._TestMethod;
			}
			set
			{
				if ((this._TestMethod != value))
				{
					this.OnTestMethodChanging(value);
					this.SendPropertyChanging();
					this._TestMethod = value;
					this.SendPropertyChanged("TestMethod");
					this.OnTestMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accessories", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Accessories
		{
			get
			{
				return this._Accessories;
			}
			set
			{
				if ((this._Accessories != value))
				{
					this.OnAccessoriesChanging(value);
					this.SendPropertyChanging();
					this._Accessories = value;
					this.SendPropertyChanged("Accessories");
					this.OnAccessoriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceiveDate
		{
			get
			{
				return this._ReceiveDate;
			}
			set
			{
				if ((this._ReceiveDate != value))
				{
					this.OnReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiveDate = value;
					this.SendPropertyChanged("ReceiveDate");
					this.OnReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveStaffID", DbType="NVarChar(30)")]
		public string ReceiveStaffID
		{
			get
			{
				return this._ReceiveStaffID;
			}
			set
			{
				if ((this._ReceiveStaffID != value))
				{
					if ((this._Staff.HasLoadedOrAssignedValue || this._Staff1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiveStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiveStaffID = value;
					this.SendPropertyChanged("ReceiveStaffID");
					this.OnReceiveStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="Date")]
		public System.Nullable<System.DateTime> AppointmentDate
		{
			get
			{
				return this._AppointmentDate;
			}
			set
			{
				if ((this._AppointmentDate != value))
				{
					this.OnAppointmentDateChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDate = value;
					this.SendPropertyChanged("AppointmentDate");
					this.OnAppointmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnStaffID", DbType="NVarChar(30)")]
		public string ReturnStaffID
		{
			get
			{
				return this._ReturnStaffID;
			}
			set
			{
				if ((this._ReturnStaffID != value))
				{
					this.OnReturnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnStaffID = value;
					this.SendPropertyChanged("ReturnStaffID");
					this.OnReturnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._RequestStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldEquip", DbType="Int")]
		public System.Nullable<int> HoldEquip
		{
			get
			{
				return this._HoldEquip;
			}
			set
			{
				if ((this._HoldEquip != value))
				{
					this.OnHoldEquipChanging(value);
					this.SendPropertyChanging();
					this._HoldEquip = value;
					this.SendPropertyChanged("HoldEquip");
					this.OnHoldEquipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmDate", DbType="Date")]
		public System.Nullable<System.DateTime> ConfirmDate
		{
			get
			{
				return this._ConfirmDate;
			}
			set
			{
				if ((this._ConfirmDate != value))
				{
					this.OnConfirmDateChanging(value);
					this.SendPropertyChanging();
					this._ConfirmDate = value;
					this.SendPropertyChanged("ConfirmDate");
					this.OnConfirmDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalNote", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string InternalNote
		{
			get
			{
				return this._InternalNote;
			}
			set
			{
				if ((this._InternalNote != value))
				{
					this.OnInternalNoteChanging(value);
					this.SendPropertyChanging();
					this._InternalNote = value;
					this.SendPropertyChanged("InternalNote");
					this.OnInternalNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffIDNonIssue", DbType="NVarChar(30)")]
		public string StaffIDNonIssue
		{
			get
			{
				return this._StaffIDNonIssue;
			}
			set
			{
				if ((this._StaffIDNonIssue != value))
				{
					this.OnStaffIDNonIssueChanging(value);
					this.SendPropertyChanging();
					this._StaffIDNonIssue = value;
					this.SendPropertyChanged("StaffIDNonIssue");
					this.OnStaffIDNonIssueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonIssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> NonIssueDate
		{
			get
			{
				return this._NonIssueDate;
			}
			set
			{
				if ((this._NonIssueDate != value))
				{
					this.OnNonIssueDateChanging(value);
					this.SendPropertyChanging();
					this._NonIssueDate = value;
					this.SendPropertyChanged("NonIssueDate");
					this.OnNonIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffIDApprove", DbType="NVarChar(30)")]
		public string StaffIDApprove
		{
			get
			{
				return this._StaffIDApprove;
			}
			set
			{
				if ((this._StaffIDApprove != value))
				{
					this.OnStaffIDApproveChanging(value);
					this.SendPropertyChanging();
					this._StaffIDApprove = value;
					this.SendPropertyChanged("StaffIDApprove");
					this.OnStaffIDApproveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveNonIssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> ApproveNonIssueDate
		{
			get
			{
				return this._ApproveNonIssueDate;
			}
			set
			{
				if ((this._ApproveNonIssueDate != value))
				{
					this.OnApproveNonIssueDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveNonIssueDate = value;
					this.SendPropertyChanged("ApproveNonIssueDate");
					this.OnApproveNonIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Request_Assignment", Storage="_Assignment", ThisKey="RequestID", OtherKey="AssignmentID", IsUnique=true, IsForeignKey=false)]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.Request = null;
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.Request = this;
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Request", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Request1", Storage="_Company1", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company1
		{
			get
			{
				return this._Company1.Entity;
			}
			set
			{
				Company previousValue = this._Company1.Entity;
				if (((previousValue != value) 
							|| (this._Company1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company1.Entity = null;
						previousValue.Requests1.Remove(this);
					}
					this._Company1.Entity = value;
					if ((value != null))
					{
						value.Requests1.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Request", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Request", Storage="_Country", ThisKey="MadeInID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._MadeInID = value.CountryID;
					}
					else
					{
						this._MadeInID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Request", Storage="_EquipmentType", ThisKey="EquTypeID", OtherKey="EquTypeID", IsForeignKey=true)]
		public EquipmentType EquipmentType
		{
			get
			{
				return this._EquipmentType.Entity;
			}
			set
			{
				EquipmentType previousValue = this._EquipmentType.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentType.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._EquipmentType.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._EquTypeID = value.EquTypeID;
					}
					else
					{
						this._EquTypeID = default(string);
					}
					this.SendPropertyChanged("EquipmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestStatus_Request", Storage="_RequestStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true)]
		public RequestStatus RequestStatus
		{
			get
			{
				return this._RequestStatus.Entity;
			}
			set
			{
				RequestStatus previousValue = this._RequestStatus.Entity;
				if (((previousValue != value) 
							|| (this._RequestStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestStatus.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._RequestStatus.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RequestStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Request", Storage="_Staff", ThisKey="ReceiveStaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._ReceiveStaffID = value.StaffID;
					}
					else
					{
						this._ReceiveStaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Request1", Storage="_Staff1", ThisKey="ReceiveStaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff1
		{
			get
			{
				return this._Staff1.Entity;
			}
			set
			{
				Staff previousValue = this._Staff1.Entity;
				if (((previousValue != value) 
							|| (this._Staff1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff1.Entity = null;
						previousValue.Requests1.Remove(this);
					}
					this._Staff1.Entity = value;
					if ((value != null))
					{
						value.Requests1.Add(this);
						this._ReceiveStaffID = value.StaffID;
					}
					else
					{
						this._ReceiveStaffID = default(string);
					}
					this.SendPropertyChanged("Staff1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestStatus")]
	public partial class RequestStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private string _Note;
		
		private EntitySet<Request> _Requests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public RequestStatus()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(30)")]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequestStatus_Request", Storage="_Requests", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.RequestStatus = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.RequestStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Role1;
		
		private EntitySet<Authorize> _Authorizes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRole1Changing(string value);
    partial void OnRole1Changed();
    #endregion
		
		public Role()
		{
			this._Authorizes = new EntitySet<Authorize>(new Action<Authorize>(this.attach_Authorizes), new Action<Authorize>(this.detach_Authorizes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Role", Storage="_Role1", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Role1
		{
			get
			{
				return this._Role1;
			}
			set
			{
				if ((this._Role1 != value))
				{
					this.OnRole1Changing(value);
					this.SendPropertyChanging();
					this._Role1 = value;
					this.SendPropertyChanged("Role1");
					this.OnRole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Authorize", Storage="_Authorizes", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Authorize> Authorizes
		{
			get
			{
				return this._Authorizes;
			}
			set
			{
				this._Authorizes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Authorizes(Authorize entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Authorizes(Authorize entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _EquTypeID;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<bool> _Invalid;
		
		private System.Nullable<int> _Level;
		
		private EntityRef<EquipmentType> _EquipmentType;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnEquTypeIDChanging(string value);
    partial void OnEquTypeIDChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnInvalidChanging(System.Nullable<bool> value);
    partial void OnInvalidChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public Skill()
		{
			this._EquipmentType = default(EntityRef<EquipmentType>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquTypeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EquTypeID
		{
			get
			{
				return this._EquTypeID;
			}
			set
			{
				if ((this._EquTypeID != value))
				{
					if (this._EquipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EquTypeID = value;
					this.SendPropertyChanged("EquTypeID");
					this.OnEquTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invalid", DbType="Bit")]
		public System.Nullable<bool> Invalid
		{
			get
			{
				return this._Invalid;
			}
			set
			{
				if ((this._Invalid != value))
				{
					this.OnInvalidChanging(value);
					this.SendPropertyChanging();
					this._Invalid = value;
					this.SendPropertyChanged("Invalid");
					this.OnInvalidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Skill", Storage="_EquipmentType", ThisKey="EquTypeID", OtherKey="EquTypeID", IsForeignKey=true)]
		public EquipmentType EquipmentType
		{
			get
			{
				return this._EquipmentType.Entity;
			}
			set
			{
				EquipmentType previousValue = this._EquipmentType.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentType.Entity = null;
						previousValue.Skills.Remove(this);
					}
					this._EquipmentType.Entity = value;
					if ((value != null))
					{
						value.Skills.Add(this);
						this._EquTypeID = value.EquTypeID;
					}
					else
					{
						this._EquTypeID = default(string);
					}
					this.SendPropertyChanged("EquipmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Skill", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Skills.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Skills.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _StaffNo;
		
		private string _StaffFistName;
		
		private string _StaffLastName;
		
		private string _StaffFullName;
		
		private string _ID;
		
		private string _PhoneNo;
		
		private string _HomeAddress;
		
		private string _HomePhone;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Department;
		
		private string _Position;
		
		private string _WorkHistory;
		
		private string _TrainHistory;
		
		private string _Username;
		
		private string _Password;
		
		private System.Data.Linq.Binary _StaffImg;
		
		private EntitySet<Assignment> _Assignments;
		
		private EntitySet<Assignment> _Assignments1;
		
		private EntitySet<Assignment> _Assignments2;
		
		private EntitySet<Assignment> _Assignments3;
		
		private EntitySet<Assignment> _Assignments4;
		
		private EntitySet<Authorize> _Authorizes;
		
		private EntitySet<Handover> _Handovers;
		
		private EntitySet<Handover> _Handovers1;
		
		private EntitySet<OrderSt> _OrderSts;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Request> _Requests1;
		
		private EntitySet<Skill> _Skills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnStaffNoChanging(string value);
    partial void OnStaffNoChanged();
    partial void OnStaffFistNameChanging(string value);
    partial void OnStaffFistNameChanged();
    partial void OnStaffLastNameChanging(string value);
    partial void OnStaffLastNameChanged();
    partial void OnStaffFullNameChanging(string value);
    partial void OnStaffFullNameChanged();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnHomeAddressChanging(string value);
    partial void OnHomeAddressChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnWorkHistoryChanging(string value);
    partial void OnWorkHistoryChanged();
    partial void OnTrainHistoryChanging(string value);
    partial void OnTrainHistoryChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStaffImgChanging(System.Data.Linq.Binary value);
    partial void OnStaffImgChanged();
    #endregion
		
		public Staff()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			this._Assignments1 = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments1), new Action<Assignment>(this.detach_Assignments1));
			this._Assignments2 = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments2), new Action<Assignment>(this.detach_Assignments2));
			this._Assignments3 = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments3), new Action<Assignment>(this.detach_Assignments3));
			this._Assignments4 = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments4), new Action<Assignment>(this.detach_Assignments4));
			this._Authorizes = new EntitySet<Authorize>(new Action<Authorize>(this.attach_Authorizes), new Action<Authorize>(this.detach_Authorizes));
			this._Handovers = new EntitySet<Handover>(new Action<Handover>(this.attach_Handovers), new Action<Handover>(this.detach_Handovers));
			this._Handovers1 = new EntitySet<Handover>(new Action<Handover>(this.attach_Handovers1), new Action<Handover>(this.detach_Handovers1));
			this._OrderSts = new EntitySet<OrderSt>(new Action<OrderSt>(this.attach_OrderSts), new Action<OrderSt>(this.detach_OrderSts));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Requests1 = new EntitySet<Request>(new Action<Request>(this.attach_Requests1), new Action<Request>(this.detach_Requests1));
			this._Skills = new EntitySet<Skill>(new Action<Skill>(this.attach_Skills), new Action<Skill>(this.detach_Skills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffNo", DbType="NVarChar(50)")]
		public string StaffNo
		{
			get
			{
				return this._StaffNo;
			}
			set
			{
				if ((this._StaffNo != value))
				{
					this.OnStaffNoChanging(value);
					this.SendPropertyChanging();
					this._StaffNo = value;
					this.SendPropertyChanged("StaffNo");
					this.OnStaffNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffFistName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StaffFistName
		{
			get
			{
				return this._StaffFistName;
			}
			set
			{
				if ((this._StaffFistName != value))
				{
					this.OnStaffFistNameChanging(value);
					this.SendPropertyChanging();
					this._StaffFistName = value;
					this.SendPropertyChanged("StaffFistName");
					this.OnStaffFistNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffLastName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StaffLastName
		{
			get
			{
				return this._StaffLastName;
			}
			set
			{
				if ((this._StaffLastName != value))
				{
					this.OnStaffLastNameChanging(value);
					this.SendPropertyChanging();
					this._StaffLastName = value;
					this.SendPropertyChanged("StaffLastName");
					this.OnStaffLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffFullName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string StaffFullName
		{
			get
			{
				return this._StaffFullName;
			}
			set
			{
				if ((this._StaffFullName != value))
				{
					this.OnStaffFullNameChanging(value);
					this.SendPropertyChanging();
					this._StaffFullName = value;
					this.SendPropertyChanged("StaffFullName");
					this.OnStaffFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50)")]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NVarChar(30)")]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddress", DbType="NVarChar(100)")]
		public string HomeAddress
		{
			get
			{
				return this._HomeAddress;
			}
			set
			{
				if ((this._HomeAddress != value))
				{
					this.OnHomeAddressChanging(value);
					this.SendPropertyChanging();
					this._HomeAddress = value;
					this.SendPropertyChanged("HomeAddress");
					this.OnHomeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(30)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date")]
		public System.Nullable<System.DateTime> BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(30)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkHistory", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string WorkHistory
		{
			get
			{
				return this._WorkHistory;
			}
			set
			{
				if ((this._WorkHistory != value))
				{
					this.OnWorkHistoryChanging(value);
					this.SendPropertyChanging();
					this._WorkHistory = value;
					this.SendPropertyChanged("WorkHistory");
					this.OnWorkHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainHistory", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TrainHistory
		{
			get
			{
				return this._TrainHistory;
			}
			set
			{
				if ((this._TrainHistory != value))
				{
					this.OnTrainHistoryChanging(value);
					this.SendPropertyChanging();
					this._TrainHistory = value;
					this.SendPropertyChanged("TrainHistory");
					this.OnTrainHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffImg", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary StaffImg
		{
			get
			{
				return this._StaffImg;
			}
			set
			{
				if ((this._StaffImg != value))
				{
					this.OnStaffImgChanging(value);
					this.SendPropertyChanging();
					this._StaffImg = value;
					this.SendPropertyChanged("StaffImg");
					this.OnStaffImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment", Storage="_Assignments", ThisKey="StaffID", OtherKey="AssignStaffID")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment1", Storage="_Assignments1", ThisKey="StaffID", OtherKey="TestStaffID1")]
		public EntitySet<Assignment> Assignments1
		{
			get
			{
				return this._Assignments1;
			}
			set
			{
				this._Assignments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment2", Storage="_Assignments2", ThisKey="StaffID", OtherKey="TestStaffID2")]
		public EntitySet<Assignment> Assignments2
		{
			get
			{
				return this._Assignments2;
			}
			set
			{
				this._Assignments2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment3", Storage="_Assignments3", ThisKey="StaffID", OtherKey="TestStaffID1")]
		public EntitySet<Assignment> Assignments3
		{
			get
			{
				return this._Assignments3;
			}
			set
			{
				this._Assignments3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Assignment4", Storage="_Assignments4", ThisKey="StaffID", OtherKey="TestStaffID2")]
		public EntitySet<Assignment> Assignments4
		{
			get
			{
				return this._Assignments4;
			}
			set
			{
				this._Assignments4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Authorize", Storage="_Authorizes", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Authorize> Authorizes
		{
			get
			{
				return this._Authorizes;
			}
			set
			{
				this._Authorizes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Handover", Storage="_Handovers", ThisKey="StaffID", OtherKey="ReceiveStaffID")]
		public EntitySet<Handover> Handovers
		{
			get
			{
				return this._Handovers;
			}
			set
			{
				this._Handovers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Handover1", Storage="_Handovers1", ThisKey="StaffID", OtherKey="HandoverStaffID")]
		public EntitySet<Handover> Handovers1
		{
			get
			{
				return this._Handovers1;
			}
			set
			{
				this._Handovers1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_OrderSt", Storage="_OrderSts", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<OrderSt> OrderSts
		{
			get
			{
				return this._OrderSts;
			}
			set
			{
				this._OrderSts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Request", Storage="_Requests", ThisKey="StaffID", OtherKey="ReceiveStaffID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Request1", Storage="_Requests1", ThisKey="StaffID", OtherKey="ReceiveStaffID")]
		public EntitySet<Request> Requests1
		{
			get
			{
				return this._Requests1;
			}
			set
			{
				this._Requests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Skill", Storage="_Skills", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Skill> Skills
		{
			get
			{
				return this._Skills;
			}
			set
			{
				this._Skills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Assignments1(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Assignments1(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_Assignments2(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff2 = this;
		}
		
		private void detach_Assignments2(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff2 = null;
		}
		
		private void attach_Assignments3(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff3 = this;
		}
		
		private void detach_Assignments3(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff3 = null;
		}
		
		private void attach_Assignments4(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff4 = this;
		}
		
		private void detach_Assignments4(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Staff4 = null;
		}
		
		private void attach_Authorizes(Authorize entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Authorizes(Authorize entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Handovers(Handover entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Handovers(Handover entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Handovers1(Handover entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Handovers1(Handover entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Requests1(Request entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = this;
		}
		
		private void detach_Requests1(Request entity)
		{
			this.SendPropertyChanging();
			entity.Staff1 = null;
		}
		
		private void attach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Skills(Skill entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stationery")]
	public partial class Stationery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StID;
		
		private string _StName;
		
		private System.Nullable<float> _Price;
		
		private string _Note;
		
		private EntitySet<OrderSt> _OrderSts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStIDChanging(int value);
    partial void OnStIDChanged();
    partial void OnStNameChanging(string value);
    partial void OnStNameChanged();
    partial void OnPriceChanging(System.Nullable<float> value);
    partial void OnPriceChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Stationery()
		{
			this._OrderSts = new EntitySet<OrderSt>(new Action<OrderSt>(this.attach_OrderSts), new Action<OrderSt>(this.detach_OrderSts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StID
		{
			get
			{
				return this._StID;
			}
			set
			{
				if ((this._StID != value))
				{
					this.OnStIDChanging(value);
					this.SendPropertyChanging();
					this._StID = value;
					this.SendPropertyChanged("StID");
					this.OnStIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string StName
		{
			get
			{
				return this._StName;
			}
			set
			{
				if ((this._StName != value))
				{
					this.OnStNameChanging(value);
					this.SendPropertyChanging();
					this._StName = value;
					this.SendPropertyChanged("StName");
					this.OnStNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Real")]
		public System.Nullable<float> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stationery_OrderSt", Storage="_OrderSts", ThisKey="StID", OtherKey="StID")]
		public EntitySet<OrderSt> OrderSts
		{
			get
			{
				return this._OrderSts;
			}
			set
			{
				this._OrderSts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.Stationery = this;
		}
		
		private void detach_OrderSts(OrderSt entity)
		{
			this.SendPropertyChanging();
			entity.Stationery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestAccessory")]
	public partial class TestAccessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccID;
		
		private System.Nullable<int> _TestSysID;
		
		private string _AccNo;
		
		private string _AccName;
		
		private string _Model;
		
		private string _SN;
		
		private string _Manufacturer;
		
		private System.Nullable<int> _CountryID;
		
		private System.Nullable<int> _AccTypeID;
		
		private System.Nullable<int> _MadeYear;
		
		private System.Nullable<System.DateTime> _ReceiveDate;
		
		private string _History;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<int> _Hold;
		
		private System.Nullable<int> _Body;
		
		private System.Nullable<int> _MainAcc;
		
		private System.Nullable<int> _Valid;
		
		private EntitySet<HandoverAcc> _HandoverAccs;
		
		private EntityRef<AccHoldStatus> _AccHoldStatus;
		
		private EntityRef<AccType> _AccType;
		
		private EntityRef<TestSysStatus> _TestSysStatus;
		
		private EntityRef<TestSystem> _TestSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccIDChanging(int value);
    partial void OnAccIDChanged();
    partial void OnTestSysIDChanging(System.Nullable<int> value);
    partial void OnTestSysIDChanged();
    partial void OnAccNoChanging(string value);
    partial void OnAccNoChanged();
    partial void OnAccNameChanging(string value);
    partial void OnAccNameChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnSNChanging(string value);
    partial void OnSNChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnAccTypeIDChanging(System.Nullable<int> value);
    partial void OnAccTypeIDChanged();
    partial void OnMadeYearChanging(System.Nullable<int> value);
    partial void OnMadeYearChanged();
    partial void OnReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceiveDateChanged();
    partial void OnHistoryChanging(string value);
    partial void OnHistoryChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnHoldChanging(System.Nullable<int> value);
    partial void OnHoldChanged();
    partial void OnBodyChanging(System.Nullable<int> value);
    partial void OnBodyChanged();
    partial void OnMainAccChanging(System.Nullable<int> value);
    partial void OnMainAccChanged();
    partial void OnValidChanging(System.Nullable<int> value);
    partial void OnValidChanged();
    #endregion
		
		public TestAccessory()
		{
			this._HandoverAccs = new EntitySet<HandoverAcc>(new Action<HandoverAcc>(this.attach_HandoverAccs), new Action<HandoverAcc>(this.detach_HandoverAccs));
			this._AccHoldStatus = default(EntityRef<AccHoldStatus>);
			this._AccType = default(EntityRef<AccType>);
			this._TestSysStatus = default(EntityRef<TestSysStatus>);
			this._TestSystem = default(EntityRef<TestSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccID
		{
			get
			{
				return this._AccID;
			}
			set
			{
				if ((this._AccID != value))
				{
					this.OnAccIDChanging(value);
					this.SendPropertyChanging();
					this._AccID = value;
					this.SendPropertyChanged("AccID");
					this.OnAccIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysID", DbType="Int")]
		public System.Nullable<int> TestSysID
		{
			get
			{
				return this._TestSysID;
			}
			set
			{
				if ((this._TestSysID != value))
				{
					if (this._TestSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestSysIDChanging(value);
					this.SendPropertyChanging();
					this._TestSysID = value;
					this.SendPropertyChanged("TestSysID");
					this.OnTestSysIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccNo", DbType="NVarChar(50)")]
		public string AccNo
		{
			get
			{
				return this._AccNo;
			}
			set
			{
				if ((this._AccNo != value))
				{
					this.OnAccNoChanging(value);
					this.SendPropertyChanging();
					this._AccNo = value;
					this.SendPropertyChanged("AccNo");
					this.OnAccNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AccName
		{
			get
			{
				return this._AccName;
			}
			set
			{
				if ((this._AccName != value))
				{
					this.OnAccNameChanging(value);
					this.SendPropertyChanging();
					this._AccName = value;
					this.SendPropertyChanged("AccName");
					this.OnAccNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SN", DbType="NVarChar(50)")]
		public string SN
		{
			get
			{
				return this._SN;
			}
			set
			{
				if ((this._SN != value))
				{
					this.OnSNChanging(value);
					this.SendPropertyChanging();
					this._SN = value;
					this.SendPropertyChanged("SN");
					this.OnSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccTypeID", DbType="Int")]
		public System.Nullable<int> AccTypeID
		{
			get
			{
				return this._AccTypeID;
			}
			set
			{
				if ((this._AccTypeID != value))
				{
					if (this._AccType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AccTypeID = value;
					this.SendPropertyChanged("AccTypeID");
					this.OnAccTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MadeYear", DbType="Int")]
		public System.Nullable<int> MadeYear
		{
			get
			{
				return this._MadeYear;
			}
			set
			{
				if ((this._MadeYear != value))
				{
					this.OnMadeYearChanging(value);
					this.SendPropertyChanging();
					this._MadeYear = value;
					this.SendPropertyChanged("MadeYear");
					this.OnMadeYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceiveDate
		{
			get
			{
				return this._ReceiveDate;
			}
			set
			{
				if ((this._ReceiveDate != value))
				{
					this.OnReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiveDate = value;
					this.SendPropertyChanged("ReceiveDate");
					this.OnReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string History
		{
			get
			{
				return this._History;
			}
			set
			{
				if ((this._History != value))
				{
					this.OnHistoryChanging(value);
					this.SendPropertyChanging();
					this._History = value;
					this.SendPropertyChanged("History");
					this.OnHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._TestSysStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hold", DbType="Int")]
		public System.Nullable<int> Hold
		{
			get
			{
				return this._Hold;
			}
			set
			{
				if ((this._Hold != value))
				{
					if (this._AccHoldStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHoldChanging(value);
					this.SendPropertyChanging();
					this._Hold = value;
					this.SendPropertyChanged("Hold");
					this.OnHoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="Int")]
		public System.Nullable<int> Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainAcc", DbType="Int")]
		public System.Nullable<int> MainAcc
		{
			get
			{
				return this._MainAcc;
			}
			set
			{
				if ((this._MainAcc != value))
				{
					this.OnMainAccChanging(value);
					this.SendPropertyChanging();
					this._MainAcc = value;
					this.SendPropertyChanged("MainAcc");
					this.OnMainAccChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valid", DbType="Int")]
		public System.Nullable<int> Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestAccessory_HandoverAcc", Storage="_HandoverAccs", ThisKey="AccID", OtherKey="AccID")]
		public EntitySet<HandoverAcc> HandoverAccs
		{
			get
			{
				return this._HandoverAccs;
			}
			set
			{
				this._HandoverAccs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccHoldStatus_TestAccessory", Storage="_AccHoldStatus", ThisKey="Hold", OtherKey="AccHoldID", IsForeignKey=true)]
		public AccHoldStatus AccHoldStatus
		{
			get
			{
				return this._AccHoldStatus.Entity;
			}
			set
			{
				AccHoldStatus previousValue = this._AccHoldStatus.Entity;
				if (((previousValue != value) 
							|| (this._AccHoldStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccHoldStatus.Entity = null;
						previousValue.TestAccessories.Remove(this);
					}
					this._AccHoldStatus.Entity = value;
					if ((value != null))
					{
						value.TestAccessories.Add(this);
						this._Hold = value.AccHoldID;
					}
					else
					{
						this._Hold = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccHoldStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccType_TestAccessory", Storage="_AccType", ThisKey="AccTypeID", OtherKey="AccTypeID", IsForeignKey=true)]
		public AccType AccType
		{
			get
			{
				return this._AccType.Entity;
			}
			set
			{
				AccType previousValue = this._AccType.Entity;
				if (((previousValue != value) 
							|| (this._AccType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccType.Entity = null;
						previousValue.TestAccessories.Remove(this);
					}
					this._AccType.Entity = value;
					if ((value != null))
					{
						value.TestAccessories.Add(this);
						this._AccTypeID = value.AccTypeID;
					}
					else
					{
						this._AccTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_TestAccessory", Storage="_TestSysStatus", ThisKey="StatusID", OtherKey="TestSysStatusID", IsForeignKey=true)]
		public TestSysStatus TestSysStatus
		{
			get
			{
				return this._TestSysStatus.Entity;
			}
			set
			{
				TestSysStatus previousValue = this._TestSysStatus.Entity;
				if (((previousValue != value) 
							|| (this._TestSysStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSysStatus.Entity = null;
						previousValue.TestAccessories.Remove(this);
					}
					this._TestSysStatus.Entity = value;
					if ((value != null))
					{
						value.TestAccessories.Add(this);
						this._StatusID = value.TestSysStatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSysStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystem_TestAccessory", Storage="_TestSystem", ThisKey="TestSysID", OtherKey="TestSysID", IsForeignKey=true)]
		public TestSystem TestSystem
		{
			get
			{
				return this._TestSystem.Entity;
			}
			set
			{
				TestSystem previousValue = this._TestSystem.Entity;
				if (((previousValue != value) 
							|| (this._TestSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSystem.Entity = null;
						previousValue.TestAccessories.Remove(this);
					}
					this._TestSystem.Entity = value;
					if ((value != null))
					{
						value.TestAccessories.Add(this);
						this._TestSysID = value.TestSysID;
					}
					else
					{
						this._TestSysID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.TestAccessory = this;
		}
		
		private void detach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.TestAccessory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestField")]
	public partial class TestField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private string _FiledInfo;
		
		private EntitySet<TestSystem> _TestSystems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnFiledInfoChanging(string value);
    partial void OnFiledInfoChanged();
    #endregion
		
		public TestField()
		{
			this._TestSystems = new EntitySet<TestSystem>(new Action<TestSystem>(this.attach_TestSystems), new Action<TestSystem>(this.detach_TestSystems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FiledInfo", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string FiledInfo
		{
			get
			{
				return this._FiledInfo;
			}
			set
			{
				if ((this._FiledInfo != value))
				{
					this.OnFiledInfoChanging(value);
					this.SendPropertyChanging();
					this._FiledInfo = value;
					this.SendPropertyChanged("FiledInfo");
					this.OnFiledInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestField_TestSystem", Storage="_TestSystems", ThisKey="FieldID", OtherKey="FieldID")]
		public EntitySet<TestSystem> TestSystems
		{
			get
			{
				return this._TestSystems;
			}
			set
			{
				this._TestSystems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestField = this;
		}
		
		private void detach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestReport")]
	public partial class TestReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssignmentID;
		
		private string _RequestNo;
		
		private string _TestReportNo;
		
		private System.Nullable<System.DateTime> _TestReportIssueDate;
		
		private System.Nullable<System.DateTime> _TestDate;
		
		private System.Nullable<int> _TestDateSession;
		
		private string _Temperature;
		
		private string _Humidity;
		
		private string _TestHistory;
		
		private string _TestReportNoFull;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _ReturnRPDate;
		
		private string _ReturnStaffID;
		
		private System.Nullable<int> _RedBillID;
		
		private System.Nullable<System.DateTime> _ReturnRBDate;
		
		private System.Nullable<int> _HoldTest;
		
		private System.Nullable<int> _HoldRedBill;
		
		private string _ReturnRBStaffID;
		
		private System.Nullable<int> _Kind;
		
		private string _CreateRPStaff;
		
		private string _ApproveStaff;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private EntityRef<Assignment> _Assignment;
		
		private EntityRef<RedBill> _RedBill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssignmentIDChanging(int value);
    partial void OnAssignmentIDChanged();
    partial void OnRequestNoChanging(string value);
    partial void OnRequestNoChanged();
    partial void OnTestReportNoChanging(string value);
    partial void OnTestReportNoChanged();
    partial void OnTestReportIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTestReportIssueDateChanged();
    partial void OnTestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTestDateChanged();
    partial void OnTestDateSessionChanging(System.Nullable<int> value);
    partial void OnTestDateSessionChanged();
    partial void OnTemperatureChanging(string value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(string value);
    partial void OnHumidityChanged();
    partial void OnTestHistoryChanging(string value);
    partial void OnTestHistoryChanged();
    partial void OnTestReportNoFullChanging(string value);
    partial void OnTestReportNoFullChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnReturnRPDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnRPDateChanged();
    partial void OnReturnStaffIDChanging(string value);
    partial void OnReturnStaffIDChanged();
    partial void OnRedBillIDChanging(System.Nullable<int> value);
    partial void OnRedBillIDChanged();
    partial void OnReturnRBDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnRBDateChanged();
    partial void OnHoldTestChanging(System.Nullable<int> value);
    partial void OnHoldTestChanged();
    partial void OnHoldRedBillChanging(System.Nullable<int> value);
    partial void OnHoldRedBillChanged();
    partial void OnReturnRBStaffIDChanging(string value);
    partial void OnReturnRBStaffIDChanged();
    partial void OnKindChanging(System.Nullable<int> value);
    partial void OnKindChanged();
    partial void OnCreateRPStaffChanging(string value);
    partial void OnCreateRPStaffChanged();
    partial void OnApproveStaffChanging(string value);
    partial void OnApproveStaffChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    #endregion
		
		public TestReport()
		{
			this._Assignment = default(EntityRef<Assignment>);
			this._RedBill = default(EntityRef<RedBill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AssignmentID
		{
			get
			{
				return this._AssignmentID;
			}
			set
			{
				if ((this._AssignmentID != value))
				{
					if (this._Assignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._AssignmentID = value;
					this.SendPropertyChanged("AssignmentID");
					this.OnAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestNo", DbType="NVarChar(50)")]
		public string RequestNo
		{
			get
			{
				return this._RequestNo;
			}
			set
			{
				if ((this._RequestNo != value))
				{
					this.OnRequestNoChanging(value);
					this.SendPropertyChanging();
					this._RequestNo = value;
					this.SendPropertyChanged("RequestNo");
					this.OnRequestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestReportNo", DbType="NVarChar(50)")]
		public string TestReportNo
		{
			get
			{
				return this._TestReportNo;
			}
			set
			{
				if ((this._TestReportNo != value))
				{
					this.OnTestReportNoChanging(value);
					this.SendPropertyChanging();
					this._TestReportNo = value;
					this.SendPropertyChanged("TestReportNo");
					this.OnTestReportNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestReportIssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> TestReportIssueDate
		{
			get
			{
				return this._TestReportIssueDate;
			}
			set
			{
				if ((this._TestReportIssueDate != value))
				{
					this.OnTestReportIssueDateChanging(value);
					this.SendPropertyChanging();
					this._TestReportIssueDate = value;
					this.SendPropertyChanged("TestReportIssueDate");
					this.OnTestReportIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDate", DbType="Date")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestDateSession", DbType="Int")]
		public System.Nullable<int> TestDateSession
		{
			get
			{
				return this._TestDateSession;
			}
			set
			{
				if ((this._TestDateSession != value))
				{
					this.OnTestDateSessionChanging(value);
					this.SendPropertyChanging();
					this._TestDateSession = value;
					this.SendPropertyChanged("TestDateSession");
					this.OnTestDateSessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="NVarChar(50)")]
		public string Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="NVarChar(50)")]
		public string Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestHistory", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TestHistory
		{
			get
			{
				return this._TestHistory;
			}
			set
			{
				if ((this._TestHistory != value))
				{
					this.OnTestHistoryChanging(value);
					this.SendPropertyChanging();
					this._TestHistory = value;
					this.SendPropertyChanged("TestHistory");
					this.OnTestHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestReportNoFull", DbType="NVarChar(50)")]
		public string TestReportNoFull
		{
			get
			{
				return this._TestReportNoFull;
			}
			set
			{
				if ((this._TestReportNoFull != value))
				{
					this.OnTestReportNoFullChanging(value);
					this.SendPropertyChanging();
					this._TestReportNoFull = value;
					this.SendPropertyChanged("TestReportNoFull");
					this.OnTestReportNoFullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnRPDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnRPDate
		{
			get
			{
				return this._ReturnRPDate;
			}
			set
			{
				if ((this._ReturnRPDate != value))
				{
					this.OnReturnRPDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnRPDate = value;
					this.SendPropertyChanged("ReturnRPDate");
					this.OnReturnRPDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnStaffID", DbType="NVarChar(30)")]
		public string ReturnStaffID
		{
			get
			{
				return this._ReturnStaffID;
			}
			set
			{
				if ((this._ReturnStaffID != value))
				{
					this.OnReturnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnStaffID = value;
					this.SendPropertyChanged("ReturnStaffID");
					this.OnReturnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedBillID", DbType="Int")]
		public System.Nullable<int> RedBillID
		{
			get
			{
				return this._RedBillID;
			}
			set
			{
				if ((this._RedBillID != value))
				{
					if (this._RedBill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRedBillIDChanging(value);
					this.SendPropertyChanging();
					this._RedBillID = value;
					this.SendPropertyChanged("RedBillID");
					this.OnRedBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnRBDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReturnRBDate
		{
			get
			{
				return this._ReturnRBDate;
			}
			set
			{
				if ((this._ReturnRBDate != value))
				{
					this.OnReturnRBDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnRBDate = value;
					this.SendPropertyChanged("ReturnRBDate");
					this.OnReturnRBDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldTest", DbType="Int")]
		public System.Nullable<int> HoldTest
		{
			get
			{
				return this._HoldTest;
			}
			set
			{
				if ((this._HoldTest != value))
				{
					this.OnHoldTestChanging(value);
					this.SendPropertyChanging();
					this._HoldTest = value;
					this.SendPropertyChanged("HoldTest");
					this.OnHoldTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldRedBill", DbType="Int")]
		public System.Nullable<int> HoldRedBill
		{
			get
			{
				return this._HoldRedBill;
			}
			set
			{
				if ((this._HoldRedBill != value))
				{
					this.OnHoldRedBillChanging(value);
					this.SendPropertyChanging();
					this._HoldRedBill = value;
					this.SendPropertyChanged("HoldRedBill");
					this.OnHoldRedBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnRBStaffID", DbType="NVarChar(30)")]
		public string ReturnRBStaffID
		{
			get
			{
				return this._ReturnRBStaffID;
			}
			set
			{
				if ((this._ReturnRBStaffID != value))
				{
					this.OnReturnRBStaffIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnRBStaffID = value;
					this.SendPropertyChanged("ReturnRBStaffID");
					this.OnReturnRBStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kind", DbType="Int")]
		public System.Nullable<int> Kind
		{
			get
			{
				return this._Kind;
			}
			set
			{
				if ((this._Kind != value))
				{
					this.OnKindChanging(value);
					this.SendPropertyChanging();
					this._Kind = value;
					this.SendPropertyChanged("Kind");
					this.OnKindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateRPStaff", DbType="NVarChar(30)")]
		public string CreateRPStaff
		{
			get
			{
				return this._CreateRPStaff;
			}
			set
			{
				if ((this._CreateRPStaff != value))
				{
					this.OnCreateRPStaffChanging(value);
					this.SendPropertyChanging();
					this._CreateRPStaff = value;
					this.SendPropertyChanged("CreateRPStaff");
					this.OnCreateRPStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveStaff", DbType="NVarChar(30)")]
		public string ApproveStaff
		{
			get
			{
				return this._ApproveStaff;
			}
			set
			{
				if ((this._ApproveStaff != value))
				{
					this.OnApproveStaffChanging(value);
					this.SendPropertyChanging();
					this._ApproveStaff = value;
					this.SendPropertyChanged("ApproveStaff");
					this.OnApproveStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproveDate", DbType="Date")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_TestReport", Storage="_Assignment", ThisKey="AssignmentID", OtherKey="AssignmentID", IsForeignKey=true)]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.TestReport = null;
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.TestReport = this;
						this._AssignmentID = value.AssignmentID;
					}
					else
					{
						this._AssignmentID = default(int);
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RedBill_TestReport", Storage="_RedBill", ThisKey="RedBillID", OtherKey="RedBillID", IsForeignKey=true)]
		public RedBill RedBill
		{
			get
			{
				return this._RedBill.Entity;
			}
			set
			{
				RedBill previousValue = this._RedBill.Entity;
				if (((previousValue != value) 
							|| (this._RedBill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RedBill.Entity = null;
						previousValue.TestReports.Remove(this);
					}
					this._RedBill.Entity = value;
					if ((value != null))
					{
						value.TestReports.Add(this);
						this._RedBillID = value.RedBillID;
					}
					else
					{
						this._RedBillID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RedBill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSysStatus")]
	public partial class TestSysStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestSysStatusID;
		
		private string _TestSysStatusName;
		
		private EntitySet<HandoverAcc> _HandoverAccs;
		
		private EntitySet<TestAccessory> _TestAccessories;
		
		private EntitySet<TestSystem> _TestSystems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestSysStatusIDChanging(int value);
    partial void OnTestSysStatusIDChanged();
    partial void OnTestSysStatusNameChanging(string value);
    partial void OnTestSysStatusNameChanged();
    #endregion
		
		public TestSysStatus()
		{
			this._HandoverAccs = new EntitySet<HandoverAcc>(new Action<HandoverAcc>(this.attach_HandoverAccs), new Action<HandoverAcc>(this.detach_HandoverAccs));
			this._TestAccessories = new EntitySet<TestAccessory>(new Action<TestAccessory>(this.attach_TestAccessories), new Action<TestAccessory>(this.detach_TestAccessories));
			this._TestSystems = new EntitySet<TestSystem>(new Action<TestSystem>(this.attach_TestSystems), new Action<TestSystem>(this.detach_TestSystems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestSysStatusID
		{
			get
			{
				return this._TestSysStatusID;
			}
			set
			{
				if ((this._TestSysStatusID != value))
				{
					this.OnTestSysStatusIDChanging(value);
					this.SendPropertyChanging();
					this._TestSysStatusID = value;
					this.SendPropertyChanged("TestSysStatusID");
					this.OnTestSysStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysStatusName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TestSysStatusName
		{
			get
			{
				return this._TestSysStatusName;
			}
			set
			{
				if ((this._TestSysStatusName != value))
				{
					this.OnTestSysStatusNameChanging(value);
					this.SendPropertyChanging();
					this._TestSysStatusName = value;
					this.SendPropertyChanged("TestSysStatusName");
					this.OnTestSysStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_HandoverAcc", Storage="_HandoverAccs", ThisKey="TestSysStatusID", OtherKey="Status")]
		public EntitySet<HandoverAcc> HandoverAccs
		{
			get
			{
				return this._HandoverAccs;
			}
			set
			{
				this._HandoverAccs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_TestAccessory", Storage="_TestAccessories", ThisKey="TestSysStatusID", OtherKey="StatusID")]
		public EntitySet<TestAccessory> TestAccessories
		{
			get
			{
				return this._TestAccessories;
			}
			set
			{
				this._TestAccessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_TestSystem", Storage="_TestSystems", ThisKey="TestSysStatusID", OtherKey="StatusID")]
		public EntitySet<TestSystem> TestSystems
		{
			get
			{
				return this._TestSystems;
			}
			set
			{
				this._TestSystems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = this;
		}
		
		private void detach_HandoverAccs(HandoverAcc entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = null;
		}
		
		private void attach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = this;
		}
		
		private void detach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = null;
		}
		
		private void attach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = this;
		}
		
		private void detach_TestSystems(TestSystem entity)
		{
			this.SendPropertyChanging();
			entity.TestSysStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSystem")]
	public partial class TestSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestSysID;
		
		private string _TestSysNo;
		
		private string _TestSysName;
		
		private string _Model;
		
		private string _Manufacturer;
		
		private System.Nullable<int> _CountryID;
		
		private System.Nullable<int> _MadeYear;
		
		private System.Nullable<System.DateTime> _ReceiveDate;
		
		private string _History;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<int> _SourceID;
		
		private System.Nullable<int> _FieldID;
		
		private string _TestSpec;
		
		private System.Nullable<int> _Valid;
		
		private System.Nullable<int> _Register;
		
		private EntitySet<Calibration> _Calibrations;
		
		private EntitySet<TestAccessory> _TestAccessories;
		
		private EntityRef<TestSysStatus> _TestSysStatus;
		
		private EntityRef<TestField> _TestField;
		
		private EntityRef<TestSystemSource> _TestSystemSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestSysIDChanging(int value);
    partial void OnTestSysIDChanged();
    partial void OnTestSysNoChanging(string value);
    partial void OnTestSysNoChanged();
    partial void OnTestSysNameChanging(string value);
    partial void OnTestSysNameChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnMadeYearChanging(System.Nullable<int> value);
    partial void OnMadeYearChanged();
    partial void OnReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceiveDateChanged();
    partial void OnHistoryChanging(string value);
    partial void OnHistoryChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    partial void OnFieldIDChanging(System.Nullable<int> value);
    partial void OnFieldIDChanged();
    partial void OnTestSpecChanging(string value);
    partial void OnTestSpecChanged();
    partial void OnValidChanging(System.Nullable<int> value);
    partial void OnValidChanged();
    partial void OnRegisterChanging(System.Nullable<int> value);
    partial void OnRegisterChanged();
    #endregion
		
		public TestSystem()
		{
			this._Calibrations = new EntitySet<Calibration>(new Action<Calibration>(this.attach_Calibrations), new Action<Calibration>(this.detach_Calibrations));
			this._TestAccessories = new EntitySet<TestAccessory>(new Action<TestAccessory>(this.attach_TestAccessories), new Action<TestAccessory>(this.detach_TestAccessories));
			this._TestSysStatus = default(EntityRef<TestSysStatus>);
			this._TestField = default(EntityRef<TestField>);
			this._TestSystemSource = default(EntityRef<TestSystemSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestSysID
		{
			get
			{
				return this._TestSysID;
			}
			set
			{
				if ((this._TestSysID != value))
				{
					this.OnTestSysIDChanging(value);
					this.SendPropertyChanging();
					this._TestSysID = value;
					this.SendPropertyChanged("TestSysID");
					this.OnTestSysIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysNo", DbType="NVarChar(50)")]
		public string TestSysNo
		{
			get
			{
				return this._TestSysNo;
			}
			set
			{
				if ((this._TestSysNo != value))
				{
					this.OnTestSysNoChanging(value);
					this.SendPropertyChanging();
					this._TestSysNo = value;
					this.SendPropertyChanged("TestSysNo");
					this.OnTestSysNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSysName", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TestSysName
		{
			get
			{
				return this._TestSysName;
			}
			set
			{
				if ((this._TestSysName != value))
				{
					this.OnTestSysNameChanging(value);
					this.SendPropertyChanging();
					this._TestSysName = value;
					this.SendPropertyChanged("TestSysName");
					this.OnTestSysNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MadeYear", DbType="Int")]
		public System.Nullable<int> MadeYear
		{
			get
			{
				return this._MadeYear;
			}
			set
			{
				if ((this._MadeYear != value))
				{
					this.OnMadeYearChanging(value);
					this.SendPropertyChanging();
					this._MadeYear = value;
					this.SendPropertyChanged("MadeYear");
					this.OnMadeYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReceiveDate
		{
			get
			{
				return this._ReceiveDate;
			}
			set
			{
				if ((this._ReceiveDate != value))
				{
					this.OnReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._ReceiveDate = value;
					this.SendPropertyChanged("ReceiveDate");
					this.OnReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string History
		{
			get
			{
				return this._History;
			}
			set
			{
				if ((this._History != value))
				{
					this.OnHistoryChanging(value);
					this.SendPropertyChanging();
					this._History = value;
					this.SendPropertyChanged("History");
					this.OnHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._TestSysStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceID", DbType="Int")]
		public System.Nullable<int> SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					if (this._TestSystemSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", DbType="Int")]
		public System.Nullable<int> FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._TestField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestSpec", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TestSpec
		{
			get
			{
				return this._TestSpec;
			}
			set
			{
				if ((this._TestSpec != value))
				{
					this.OnTestSpecChanging(value);
					this.SendPropertyChanging();
					this._TestSpec = value;
					this.SendPropertyChanged("TestSpec");
					this.OnTestSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valid", DbType="Int")]
		public System.Nullable<int> Valid
		{
			get
			{
				return this._Valid;
			}
			set
			{
				if ((this._Valid != value))
				{
					this.OnValidChanging(value);
					this.SendPropertyChanging();
					this._Valid = value;
					this.SendPropertyChanged("Valid");
					this.OnValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Register", DbType="Int")]
		public System.Nullable<int> Register
		{
			get
			{
				return this._Register;
			}
			set
			{
				if ((this._Register != value))
				{
					this.OnRegisterChanging(value);
					this.SendPropertyChanging();
					this._Register = value;
					this.SendPropertyChanged("Register");
					this.OnRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystem_Calibration", Storage="_Calibrations", ThisKey="TestSysID", OtherKey="TestSysID")]
		public EntitySet<Calibration> Calibrations
		{
			get
			{
				return this._Calibrations;
			}
			set
			{
				this._Calibrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystem_TestAccessory", Storage="_TestAccessories", ThisKey="TestSysID", OtherKey="TestSysID")]
		public EntitySet<TestAccessory> TestAccessories
		{
			get
			{
				return this._TestAccessories;
			}
			set
			{
				this._TestAccessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSysStatus_TestSystem", Storage="_TestSysStatus", ThisKey="StatusID", OtherKey="TestSysStatusID", IsForeignKey=true)]
		public TestSysStatus TestSysStatus
		{
			get
			{
				return this._TestSysStatus.Entity;
			}
			set
			{
				TestSysStatus previousValue = this._TestSysStatus.Entity;
				if (((previousValue != value) 
							|| (this._TestSysStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSysStatus.Entity = null;
						previousValue.TestSystems.Remove(this);
					}
					this._TestSysStatus.Entity = value;
					if ((value != null))
					{
						value.TestSystems.Add(this);
						this._StatusID = value.TestSysStatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSysStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestField_TestSystem", Storage="_TestField", ThisKey="FieldID", OtherKey="FieldID", IsForeignKey=true)]
		public TestField TestField
		{
			get
			{
				return this._TestField.Entity;
			}
			set
			{
				TestField previousValue = this._TestField.Entity;
				if (((previousValue != value) 
							|| (this._TestField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestField.Entity = null;
						previousValue.TestSystems.Remove(this);
					}
					this._TestField.Entity = value;
					if ((value != null))
					{
						value.TestSystems.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestSystemSource_TestSystem", Storage="_TestSystemSource", ThisKey="SourceID", OtherKey="SourceID", IsForeignKey=true)]
		public TestSystemSource TestSystemSource
		{
			get
			{
				return this._TestSystemSource.Entity;
			}
			set
			{
				TestSystemSource previousValue = this._TestSystemSource.Entity;
				if (((previousValue != value) 
							|| (this._TestSystemSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestSystemSource.Entity = null;
						previousValue.TestSystems.Remove(this);
					}
					this._TestSystemSource.Entity = value;
					if ((value != null))
					{
						value.TestSystems.Add(this);
						this._SourceID = value.SourceID;
					}
					else
					{
						this._SourceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestSystemSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Calibrations(Calibration entity)
		{
			this.SendPropertyChanging();
			entity.TestSystem = this;
		}
		
		private void detach_Calibrations(Calibration entity)
		{
			this.SendPropertyChanging();
			entity.TestSystem = null;
		}
		
		private void attach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.TestSystem = this;
		}
		
		private void detach_TestAccessories(TestAccessory entity)
		{
			this.SendPropertyChanging();
			entity.TestSystem = null;
		}
	}
}
#pragma warning restore 1591
